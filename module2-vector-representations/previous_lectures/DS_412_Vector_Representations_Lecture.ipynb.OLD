{"nbformat":4,"nbformat_minor":0,"metadata":{"celltoolbar":"Create Assignment","kernelspec":{"display_name":"py37  (Python3)","language":"python","name":"py37"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"colab":{"name":"DS_412_Vector_Representations_Lecture.ipynb","provenance":[],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"cM-KfuCGdQ_9"},"source":["*Unit 4, Sprint 1, Module 2*\n","\n","---\n","\n","# Vector Representations (Prepare)\n","\n","\n","As we learned yesterday, machines cannot interpret raw text. We need to transform that text into something we/machines can more readily analyze. Yesterday, we did simple counts of counts to summarize the content of Amazon reviews. Today, we'll extend those concepts to talk about vector representations such as Bag of Words (BoW) and word embedding models. We'll use those representations for search, visualization, and prepare for our classification day tomorrow. \n","\n","Processing text data to prepare it for machine learning models often means translating the information from documents into a numerical format. Bag-of-Words approaches (sometimes referred to as Frequency-Based word embeddings) accomplish this by \"vectorizing\" tokenized documents. This is done by representing each document as a row in a DataFrame and creating a column for each unique word in the corpora (group of documents). The presence or lack of a given word in a document is then represented either as a raw count of how many times a given word appears in a document (CountVectorizer) or as that word's TF-IDF score (TfidfVectorizer).\n","\n","On the python side, we will be focusing on `sklearn` and `spacy` today.  \n","\n","## Case Study\n","\n","We're going to pretend we're on the datascience team at the BBC. We want to recommend articles to visitors to on the BBC website based on the article they just read. \n","\n","[BBC data set](http://mlg.ucd.ie/datasets/bbc.html)<br>\n","For today's exercise, we have downloaded the \"raw text files\" from the \"BBC\" data set and focused on the tech articles only\n","\n","## Learning Objectives\n","* <a href=\"#p1\">Part 1</a>: Represent a document as a vector\n","* <a href=\"#p2\">Part 2</a>: Query Documents by Similarity\n","* <a href=\"#p3\">Part 3</a>: Apply word embedding models to create document vectors"]},{"cell_type":"markdown","metadata":{"id":"uxtT9pdddRAB"},"source":["### Let's start with an analogy\n","\n","![](https://peterbeshai.com/static/d9c3868cc1becd7648da453597a5d616/36dbb/DER_cube.jpg)\n","\n","Pretend that the objecting floating in the room is our raw text dataset (i.e. a collection of documents). \n","\n","A vectorizer is a mathematical transformation that takes our raw text data and transforms it into a numerical representation (i.e. numbers inside of vectors). \n","\n","Depending on which vectorizer you use, you will be capturing some of the information encoded in the text but not other information. \n","\n","So, as the analogy goes, depending which side of the floating object you stand and shine a light from, you will only see a portion of the information that exists in your text data set. Apply one vectorizer and you'll get word counts but not the contextual meaning; apply another vectorizer and you'll get the contextual meaning of the words but not the counts. \n","\n","**Take Away:** Understand the benefits and limitations of using each of the vectorizers that we'll be learning today. \n","\n","----"]},{"cell_type":"markdown","metadata":{"id":"RmTC1bWMBz02"},"source":["# 0. Colab notebook setup"]},{"cell_type":"markdown","metadata":{"id":"si_FTZzkeGFD"},"source":["##0.1 Get `spacy`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eMfQKVrneA38","executionInfo":{"status":"ok","timestamp":1638290951511,"user_tz":480,"elapsed":29158,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"c4163e04-767d-49c3-b0cf-b80388175302"},"source":["%%time\n","# You'll use en_core_web_sm for the sprint challenge due memory constraints on Codegrader\n","#!python -m spacy download en_core_web_sm \n","\n","# Locally (or on colab) let's use en_core_web_lg \n","!python -m spacy download en_core_web_md # Can do lg, takes awhile\n","# Also on Colab, need to restart runtime after this step!\n","#      or else Colab won't find spacy"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting en_core_web_md==2.2.5\n","  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_md-2.2.5/en_core_web_md-2.2.5.tar.gz (96.4 MB)\n","\u001b[K     |████████████████████████████████| 96.4 MB 1.3 MB/s \n","\u001b[?25hRequirement already satisfied: spacy>=2.2.2 in /usr/local/lib/python3.7/dist-packages (from en_core_web_md==2.2.5) (2.2.4)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (2.0.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (57.4.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (3.0.6)\n","Requirement already satisfied: catalogue<1.1.0,>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (1.0.0)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (1.19.5)\n","Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (7.4.0)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (2.23.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (1.0.6)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (4.62.3)\n","Requirement already satisfied: wasabi<1.1.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (0.8.2)\n","Requirement already satisfied: blis<0.5.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (0.4.1)\n","Requirement already satisfied: srsly<1.1.0,>=1.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (1.0.5)\n","Requirement already satisfied: plac<1.2.0,>=0.9.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=2.2.2->en_core_web_md==2.2.5) (1.1.3)\n","Requirement already satisfied: importlib-metadata>=0.20 in /usr/local/lib/python3.7/dist-packages (from catalogue<1.1.0,>=0.0.7->spacy>=2.2.2->en_core_web_md==2.2.5) (4.8.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.2.2->en_core_web_md==2.2.5) (3.6.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=0.20->catalogue<1.1.0,>=0.0.7->spacy>=2.2.2->en_core_web_md==2.2.5) (3.10.0.2)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_md==2.2.5) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_md==2.2.5) (2021.10.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_md==2.2.5) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_md==2.2.5) (2.10)\n","Building wheels for collected packages: en-core-web-md\n","  Building wheel for en-core-web-md (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for en-core-web-md: filename=en_core_web_md-2.2.5-py3-none-any.whl size=98051302 sha256=1cba69b1c7e2557e77a3f5d4834b6b0670737426232ed51478f024193192d08f\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-1ck3q66l/wheels/69/c5/b8/4f1c029d89238734311b3269762ab2ee325a42da2ce8edb997\n","Successfully built en-core-web-md\n","Installing collected packages: en-core-web-md\n","Successfully installed en-core-web-md-2.2.5\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the model via spacy.load('en_core_web_md')\n","CPU times: user 319 ms, sys: 58.8 ms, total: 378 ms\n","Wall time: 28.3 s\n"]}]},{"cell_type":"markdown","metadata":{"id":"IRKrvC4feP15"},"source":["##0.2 Restart the runtime!"]},{"cell_type":"markdown","metadata":{"id":"Eba3NjeAO-Ha"},"source":["## 0.3 Imports"]},{"cell_type":"code","metadata":{"id":"0XVf_1L3dRAD"},"source":["\"\"\" Import Statements \"\"\"\n","\n","# Classics\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","from sklearn.metrics.pairwise import cosine_similarity\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.decomposition import PCA\n","\n","import spacy\n","nlp = spacy.load(\"en_core_web_md\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"55skIZ7eidH7"},"source":["##0.4 Clone the git repo\n","so we can access the files in the `/data` folder"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kpgi5SBuePAD","executionInfo":{"status":"ok","timestamp":1638291396735,"user_tz":480,"elapsed":4568,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"9331503c-89f6-4717-bdd3-17a52b532ff5"},"source":["!git clone https://github.com/LambdaSchool/DS-Unit-4-Sprint-1-NLP.git\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'DS-Unit-4-Sprint-1-NLP'...\n","remote: Enumerating objects: 1669, done.\u001b[K\n","remote: Counting objects: 100% (138/138), done.\u001b[K\n","remote: Compressing objects: 100% (108/108), done.\u001b[K\n","remote: Total 1669 (delta 77), reused 71 (delta 30), pack-reused 1531\u001b[K\n","Receiving objects: 100% (1669/1669), 59.07 MiB | 21.41 MiB/s, done.\n","Resolving deltas: 100% (246/246), done.\n"]}]},{"cell_type":"markdown","metadata":{"id":"JD4Kv86TjEfJ"},"source":["## 0.5 Get the BBC tech articles data"]},{"cell_type":"markdown","metadata":{"id":"4v8uWdQRBjF7"},"source":["Helper function to read articles in `.txt` files in a specified directory and gather them into a big list"]},{"cell_type":"code","metadata":{"id":"6m0vfCnqdRAI"},"source":["import os \n","\n","def gather_data(filefolder):\n","    \"\"\" Produces List of Documents from a Directory\n","    \n","    filefolder (str): a path of .txt files\n","    \n","    returns list of strings \n","    \"\"\"\n","    \n","    data = []\n","    \n","    files = os.listdir(filefolder) # Causes variation across machines\n","    \n","    for filename in files: \n","        \n","        path = os.path.join(filefolder, filename)\n","                    \n","        if  path[-3:] == 'txt': # os ~endswith('txt')\n","            with open(path, 'rb') as f:\n","                data.append(f.read())\n","    \n","    return data"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XSH2TnEnBsK7"},"source":["Read the articles into a list"]},{"cell_type":"code","metadata":{"id":"gFsYq8x6dRAJ"},"source":["# locate and get path to the /data folder, using colab's file browser\n","data_path = '/content/DS-Unit-4-Sprint-1-NLP/module2-vector-representations/data'\n","data = gather_data(data_path)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kEWGUZvOXc02","executionInfo":{"status":"ok","timestamp":1638292316830,"user_tz":480,"elapsed":165,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"e2e4469f-a04a-45a7-84df-b3ddb1cac041"},"source":["print(type(data))\n","print(len(data))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'list'>\n","401\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gx9kYDLCGtN"},"source":["Articles turn out to be \"byte strings\" so we need to decode them to strings"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IC8NUCwhCY3Z","executionInfo":{"status":"ok","timestamp":1638292320866,"user_tz":480,"elapsed":161,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"d23f7923-5edb-488c-d4dc-aa3dfd72bc22"},"source":["print(data[20])\n","print(type(data[20]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["b'Blogs take on the mainstream\\n\\nWeb logs or blogs are everywhere, with at least an estimated five million on the web and that number is set to grow.\\n\\nThese online diaries come in many shapes and styles, ranging from people willing to sharing their views, pictures and links, to companies interested in another way of reaching their customers. But this year the focus has been on blogs which cast a critical eye over news events, often writing about issues ignored by the big media or offering an eye-witness account of events. Most blogs may have only a small readership, but communication experts say they have provided an avenue for people to have a say in the world of politics. The most well-known examples include Iraqi Salam Pax\\'s accounts of the US-led war, former Iranian vice-president Mohammad Ali Abtahi exclusive insight into the Islamic Republic\\'s government, and the highs and lows of the recent US election campaign. There are already websites pulling together these first-hand reporting accounts heralded by blogs, like wikinews.com, launched last November.\\n\\nThe blogging movement has been building up for many years.\\n\\nAndrew Nachison, Director of the Media Center, a US-based think-tank that studies media, technology and society, highlights the US presidential race as a possible turning point for blogs. \"You could look at that as a moment when audiences exercised a new form of power, to choose among many more sources of information than they have never had before,\" he says. \"And blogs were a key part of that transformation.\" Among them were blogs carrying picture messages, saying \"we are sorry\" for George W Bush\\'s victory and the responses from his supporters. Mr Nachison argues blogs have become independent sources for images and ideas that circumvent traditional sources of news and information such as newspapers, TV and radio. \"We have to acknowledge that in all of these cases, mainstream media actually plays a role in the discussion and the distribution of these ideas,\" he told the BBC News website. \"But they followed the story, they didn\\'t lead it.\"\\n\\nSome parts of the so-called traditional media have expressed concerns about this emerging competitor, raising questions about the journalistic value of blogs.\\n\\nOthers, like the French newspaper Le Monde, have applied a different strategy, offering blogs as part of its content. \"I don\\'t think the mission and role of journalism is threatened. It is in transition, as society itself is in transition,\" says Mr Nachison. However, he agrees with other experts like the linguist and political analyst Noam Chomsky, that mainstream media has lost the traditional role of news gatekeeper. \"The one-to-many road of traditional journalism, yes, it is threatened. And professional journalists need to acclimate themselves to an environment in which there are many more contributors to the discourse,\" says Mr Nachison. \"The notion of a gatekeeper who filters and decides what\\'s acceptable for public consumption and what isn\\'t, that\\'s gone forever.\" \"With people now walking around with information devices in their pockets, like camera or video phones, we are going to see more instances of ordinary citizens breaking stories.\"\\n\\nIt seems unlikely that we will end up living in a planet where every human is a blogger.\\n\\nBut the current number of blogs is likely to keep on growing, in a web already overloaded with information. Blog analysis firm Technorati estimates the number of blogs in existence, the so-called blogosphere, has already exceeded five million, and is growing at exponential levels. Tools such as Google\\'s Blogger, MovableType and the recently launched beta version of MSN Spaces are making it easier to run a blog. US research think-tank Pew Internet & American Life says a blog is created every 5.8 seconds, although less than 40% of the total are updated at least once every two months. But experts agree that the phenomenon, allowing individuals to publish, share ideas, exchange information, comment on current issues, post images or video on the web easily, is here to stay. \"We are entering one era in which the technological infrastructure is creating a different context for how we tell our stories and how we communicate with each other,\" said Mr Nachison. \"And there\\'s going to be bad that comes with the good.\"\\n'\n","<class 'bytes'>\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ubER5c_yPLMG","executionInfo":{"status":"ok","timestamp":1638292347362,"user_tz":480,"elapsed":335,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"30c07bf7-5a80-4240-edff-bbc65c668e58"},"source":["# decode bytestrings in a corpus to strings\n","# takes a list of documents, i.e a list of strings as input\n","articles = []\n","for article in data:\n","  article = article.decode(\"utf-8\")\n","  articles.append(article)\n","print(len(articles))\n","\n","data = articles"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["401\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ieo5lPca5Wzd","executionInfo":{"status":"ok","timestamp":1638292350635,"user_tz":480,"elapsed":390,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"ca64df41-c45a-462e-ffd7-fc4224f9cba2"},"source":["print(data[20])\n","print(type(data[20]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Blogs take on the mainstream\n","\n","Web logs or blogs are everywhere, with at least an estimated five million on the web and that number is set to grow.\n","\n","These online diaries come in many shapes and styles, ranging from people willing to sharing their views, pictures and links, to companies interested in another way of reaching their customers. But this year the focus has been on blogs which cast a critical eye over news events, often writing about issues ignored by the big media or offering an eye-witness account of events. Most blogs may have only a small readership, but communication experts say they have provided an avenue for people to have a say in the world of politics. The most well-known examples include Iraqi Salam Pax's accounts of the US-led war, former Iranian vice-president Mohammad Ali Abtahi exclusive insight into the Islamic Republic's government, and the highs and lows of the recent US election campaign. There are already websites pulling together these first-hand reporting accounts heralded by blogs, like wikinews.com, launched last November.\n","\n","The blogging movement has been building up for many years.\n","\n","Andrew Nachison, Director of the Media Center, a US-based think-tank that studies media, technology and society, highlights the US presidential race as a possible turning point for blogs. \"You could look at that as a moment when audiences exercised a new form of power, to choose among many more sources of information than they have never had before,\" he says. \"And blogs were a key part of that transformation.\" Among them were blogs carrying picture messages, saying \"we are sorry\" for George W Bush's victory and the responses from his supporters. Mr Nachison argues blogs have become independent sources for images and ideas that circumvent traditional sources of news and information such as newspapers, TV and radio. \"We have to acknowledge that in all of these cases, mainstream media actually plays a role in the discussion and the distribution of these ideas,\" he told the BBC News website. \"But they followed the story, they didn't lead it.\"\n","\n","Some parts of the so-called traditional media have expressed concerns about this emerging competitor, raising questions about the journalistic value of blogs.\n","\n","Others, like the French newspaper Le Monde, have applied a different strategy, offering blogs as part of its content. \"I don't think the mission and role of journalism is threatened. It is in transition, as society itself is in transition,\" says Mr Nachison. However, he agrees with other experts like the linguist and political analyst Noam Chomsky, that mainstream media has lost the traditional role of news gatekeeper. \"The one-to-many road of traditional journalism, yes, it is threatened. And professional journalists need to acclimate themselves to an environment in which there are many more contributors to the discourse,\" says Mr Nachison. \"The notion of a gatekeeper who filters and decides what's acceptable for public consumption and what isn't, that's gone forever.\" \"With people now walking around with information devices in their pockets, like camera or video phones, we are going to see more instances of ordinary citizens breaking stories.\"\n","\n","It seems unlikely that we will end up living in a planet where every human is a blogger.\n","\n","But the current number of blogs is likely to keep on growing, in a web already overloaded with information. Blog analysis firm Technorati estimates the number of blogs in existence, the so-called blogosphere, has already exceeded five million, and is growing at exponential levels. Tools such as Google's Blogger, MovableType and the recently launched beta version of MSN Spaces are making it easier to run a blog. US research think-tank Pew Internet & American Life says a blog is created every 5.8 seconds, although less than 40% of the total are updated at least once every two months. But experts agree that the phenomenon, allowing individuals to publish, share ideas, exchange information, comment on current issues, post images or video on the web easily, is here to stay. \"We are entering one era in which the technological infrastructure is creating a different context for how we tell our stories and how we communicate with each other,\" said Mr Nachison. \"And there's going to be bad that comes with the good.\"\n","\n","<class 'str'>\n"]}]},{"cell_type":"markdown","metadata":{"id":"2CF_285ECuXV"},"source":["Make a `spacy` tokenizer, as in Module 1<br>\n","Question: why did we use [`.strip()`](https://python-reference.readthedocs.io/en/latest/docs/str/strip.html)?"]},{"cell_type":"code","metadata":{"id":"XlnxqpI2dRAQ"},"source":["def tokenize(document):\n","    \"\"\"\n","    Takes a doc (text string) and returns a list of tokens in the form of lemmas.\n","    Filters out Stop words, punctuation, and leading/trailing spaces. \n","    \"\"\"\n","    \n","    doc = nlp(document)\n","    # last \"and\" statement is to remove token lemmas that are empty strings\n","    lemma_list = [token.lemma_.lower().strip() for token in doc if (not token.is_stop) and (not token.is_punct ) and (token.lemma_.strip()!=\"\") and (len(token.lemma_.strip())>1)]\n","    return lemma_list"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"DKox9ksM2RWM","executionInfo":{"status":"ok","timestamp":1638292599958,"user_tz":480,"elapsed":407,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"e381057b-9b51-4959-daca-3594a920455e"},"source":["data[20]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Blogs take on the mainstream\\n\\nWeb logs or blogs are everywhere, with at least an estimated five million on the web and that number is set to grow.\\n\\nThese online diaries come in many shapes and styles, ranging from people willing to sharing their views, pictures and links, to companies interested in another way of reaching their customers. But this year the focus has been on blogs which cast a critical eye over news events, often writing about issues ignored by the big media or offering an eye-witness account of events. Most blogs may have only a small readership, but communication experts say they have provided an avenue for people to have a say in the world of politics. The most well-known examples include Iraqi Salam Pax\\'s accounts of the US-led war, former Iranian vice-president Mohammad Ali Abtahi exclusive insight into the Islamic Republic\\'s government, and the highs and lows of the recent US election campaign. There are already websites pulling together these first-hand reporting accounts heralded by blogs, like wikinews.com, launched last November.\\n\\nThe blogging movement has been building up for many years.\\n\\nAndrew Nachison, Director of the Media Center, a US-based think-tank that studies media, technology and society, highlights the US presidential race as a possible turning point for blogs. \"You could look at that as a moment when audiences exercised a new form of power, to choose among many more sources of information than they have never had before,\" he says. \"And blogs were a key part of that transformation.\" Among them were blogs carrying picture messages, saying \"we are sorry\" for George W Bush\\'s victory and the responses from his supporters. Mr Nachison argues blogs have become independent sources for images and ideas that circumvent traditional sources of news and information such as newspapers, TV and radio. \"We have to acknowledge that in all of these cases, mainstream media actually plays a role in the discussion and the distribution of these ideas,\" he told the BBC News website. \"But they followed the story, they didn\\'t lead it.\"\\n\\nSome parts of the so-called traditional media have expressed concerns about this emerging competitor, raising questions about the journalistic value of blogs.\\n\\nOthers, like the French newspaper Le Monde, have applied a different strategy, offering blogs as part of its content. \"I don\\'t think the mission and role of journalism is threatened. It is in transition, as society itself is in transition,\" says Mr Nachison. However, he agrees with other experts like the linguist and political analyst Noam Chomsky, that mainstream media has lost the traditional role of news gatekeeper. \"The one-to-many road of traditional journalism, yes, it is threatened. And professional journalists need to acclimate themselves to an environment in which there are many more contributors to the discourse,\" says Mr Nachison. \"The notion of a gatekeeper who filters and decides what\\'s acceptable for public consumption and what isn\\'t, that\\'s gone forever.\" \"With people now walking around with information devices in their pockets, like camera or video phones, we are going to see more instances of ordinary citizens breaking stories.\"\\n\\nIt seems unlikely that we will end up living in a planet where every human is a blogger.\\n\\nBut the current number of blogs is likely to keep on growing, in a web already overloaded with information. Blog analysis firm Technorati estimates the number of blogs in existence, the so-called blogosphere, has already exceeded five million, and is growing at exponential levels. Tools such as Google\\'s Blogger, MovableType and the recently launched beta version of MSN Spaces are making it easier to run a blog. US research think-tank Pew Internet & American Life says a blog is created every 5.8 seconds, although less than 40% of the total are updated at least once every two months. But experts agree that the phenomenon, allowing individuals to publish, share ideas, exchange information, comment on current issues, post images or video on the web easily, is here to stay. \"We are entering one era in which the technological infrastructure is creating a different context for how we tell our stories and how we communicate with each other,\" said Mr Nachison. \"And there\\'s going to be bad that comes with the good.\"\\n'"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n4Zl0PeDOigp","executionInfo":{"status":"ok","timestamp":1638292973142,"user_tz":480,"elapsed":428,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"a960eb51-d207-4739-8eee-af961539ae02"},"source":["tokenize(data[20])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['blog',\n"," 'mainstream',\n"," 'web',\n"," 'log',\n"," 'blog',\n"," 'estimate',\n"," 'million',\n"," 'web',\n"," 'number',\n"," 'set',\n"," 'grow',\n"," 'online',\n"," 'diary',\n"," 'come',\n"," 'shape',\n"," 'style',\n"," 'range',\n"," 'people',\n"," 'willing',\n"," 'share',\n"," 'view',\n"," 'picture',\n"," 'link',\n"," 'company',\n"," 'interested',\n"," 'way',\n"," 'reach',\n"," 'customer',\n"," 'year',\n"," 'focus',\n"," 'blog',\n"," 'cast',\n"," 'critical',\n"," 'eye',\n"," 'news',\n"," 'event',\n"," 'write',\n"," 'issue',\n"," 'ignore',\n"," 'big',\n"," 'medium',\n"," 'offer',\n"," 'eye',\n"," 'witness',\n"," 'account',\n"," 'event',\n"," 'blog',\n"," 'small',\n"," 'readership',\n"," 'communication',\n"," 'expert',\n"," 'provide',\n"," 'avenue',\n"," 'people',\n"," 'world',\n"," 'politic',\n"," 'know',\n"," 'example',\n"," 'include',\n"," 'iraqi',\n"," 'salam',\n"," 'pax',\n"," 'account',\n"," 'lead',\n"," 'war',\n"," 'iranian',\n"," 'vice',\n"," 'president',\n"," 'mohammad',\n"," 'ali',\n"," 'abtahi',\n"," 'exclusive',\n"," 'insight',\n"," 'islamic',\n"," 'republic',\n"," 'government',\n"," 'high',\n"," 'low',\n"," 'recent',\n"," 'election',\n"," 'campaign',\n"," 'website',\n"," 'pull',\n"," 'hand',\n"," 'reporting',\n"," 'account',\n"," 'herald',\n"," 'blog',\n"," 'like',\n"," 'wikinews.com',\n"," 'launch',\n"," 'november',\n"," 'blogging',\n"," 'movement',\n"," 'build',\n"," 'year',\n"," 'andrew',\n"," 'nachison',\n"," 'director',\n"," 'media',\n"," 'center',\n"," 'base',\n"," 'think',\n"," 'tank',\n"," 'study',\n"," 'medium',\n"," 'technology',\n"," 'society',\n"," 'highlight',\n"," 'presidential',\n"," 'race',\n"," 'possible',\n"," 'turning',\n"," 'point',\n"," 'blog',\n"," 'look',\n"," 'moment',\n"," 'audience',\n"," 'exercise',\n"," 'new',\n"," 'form',\n"," 'power',\n"," 'choose',\n"," 'source',\n"," 'information',\n"," 'say',\n"," 'blog',\n"," 'key',\n"," 'transformation',\n"," 'blog',\n"," 'carry',\n"," 'picture',\n"," 'message',\n"," 'say',\n"," 'sorry',\n"," 'george',\n"," 'bush',\n"," 'victory',\n"," 'response',\n"," 'supporter',\n"," 'mr',\n"," 'nachison',\n"," 'argue',\n"," 'blog',\n"," 'independent',\n"," 'source',\n"," 'image',\n"," 'idea',\n"," 'circumvent',\n"," 'traditional',\n"," 'source',\n"," 'news',\n"," 'information',\n"," 'newspaper',\n"," 'tv',\n"," 'radio',\n"," 'acknowledge',\n"," 'case',\n"," 'mainstream',\n"," 'medium',\n"," 'actually',\n"," 'play',\n"," 'role',\n"," 'discussion',\n"," 'distribution',\n"," 'idea',\n"," 'tell',\n"," 'bbc',\n"," 'news',\n"," 'website',\n"," 'follow',\n"," 'story',\n"," 'lead',\n"," 'part',\n"," 'call',\n"," 'traditional',\n"," 'medium',\n"," 'express',\n"," 'concern',\n"," 'emerge',\n"," 'competitor',\n"," 'raise',\n"," 'question',\n"," 'journalistic',\n"," 'value',\n"," 'blog',\n"," 'like',\n"," 'french',\n"," 'newspaper',\n"," 'le',\n"," 'monde',\n"," 'apply',\n"," 'different',\n"," 'strategy',\n"," 'offer',\n"," 'blog',\n"," 'content',\n"," 'think',\n"," 'mission',\n"," 'role',\n"," 'journalism',\n"," 'threaten',\n"," 'transition',\n"," 'society',\n"," 'transition',\n"," 'say',\n"," 'mr',\n"," 'nachison',\n"," 'agree',\n"," 'expert',\n"," 'like',\n"," 'linguist',\n"," 'political',\n"," 'analyst',\n"," 'noam',\n"," 'chomsky',\n"," 'mainstream',\n"," 'medium',\n"," 'lose',\n"," 'traditional',\n"," 'role',\n"," 'news',\n"," 'gatekeeper',\n"," 'road',\n"," 'traditional',\n"," 'journalism',\n"," 'yes',\n"," 'threaten',\n"," 'professional',\n"," 'journalist',\n"," 'need',\n"," 'acclimate',\n"," 'environment',\n"," 'contributor',\n"," 'discourse',\n"," 'say',\n"," 'mr',\n"," 'nachison',\n"," 'notion',\n"," 'gatekeeper',\n"," 'filter',\n"," 'decide',\n"," 'acceptable',\n"," 'public',\n"," 'consumption',\n"," 'go',\n"," 'forever',\n"," 'people',\n"," 'walk',\n"," 'information',\n"," 'device',\n"," 'pocket',\n"," 'like',\n"," 'camera',\n"," 'video',\n"," 'phone',\n"," 'go',\n"," 'instance',\n"," 'ordinary',\n"," 'citizen',\n"," 'break',\n"," 'story',\n"," 'unlikely',\n"," 'end',\n"," 'live',\n"," 'planet',\n"," 'human',\n"," 'blogger',\n"," 'current',\n"," 'number',\n"," 'blog',\n"," 'likely',\n"," 'grow',\n"," 'web',\n"," 'overload',\n"," 'information',\n"," 'blog',\n"," 'analysis',\n"," 'firm',\n"," 'technorati',\n"," 'estimate',\n"," 'number',\n"," 'blog',\n"," 'existence',\n"," 'call',\n"," 'blogosphere',\n"," 'exceed',\n"," 'million',\n"," 'grow',\n"," 'exponential',\n"," 'level',\n"," 'tool',\n"," 'google',\n"," 'blogger',\n"," 'movabletype',\n"," 'recently',\n"," 'launch',\n"," 'beta',\n"," 'version',\n"," 'msn',\n"," 'spaces',\n"," 'make',\n"," 'easy',\n"," 'run',\n"," 'blog',\n"," 'research',\n"," 'think',\n"," 'tank',\n"," 'pew',\n"," 'internet',\n"," 'american',\n"," 'life',\n"," 'say',\n"," 'blog',\n"," 'create',\n"," '5.8',\n"," 'second',\n"," '40',\n"," 'total',\n"," 'update',\n"," 'month',\n"," 'expert',\n"," 'agree',\n"," 'phenomenon',\n"," 'allow',\n"," 'individual',\n"," 'publish',\n"," 'share',\n"," 'idea',\n"," 'exchange',\n"," 'information',\n"," 'comment',\n"," 'current',\n"," 'issue',\n"," 'post',\n"," 'image',\n"," 'video',\n"," 'web',\n"," 'easily',\n"," 'stay',\n"," 'enter',\n"," 'era',\n"," 'technological',\n"," 'infrastructure',\n"," 'create',\n"," 'different',\n"," 'context',\n"," 'tell',\n"," 'story',\n"," 'communicate',\n"," 'say',\n"," 'mr',\n"," 'nachison',\n"," 'go',\n"," 'bad',\n"," 'come',\n"," 'good']"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EgH0RD6y338I","executionInfo":{"status":"ok","timestamp":1638293045449,"user_tz":480,"elapsed":412,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"5683737f-a539-4912-9ac9-4713dedf3a8f"},"source":["tokenize(\"11/30/2021\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['11/30/2021']"]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"wvGZ-eiUdRAB"},"source":["# 1. Represent a document as a vector (Learn)\n","<a id=\"p1\"></a>"]},{"cell_type":"markdown","metadata":{"id":"CSUmQeX5dRAC"},"source":["## Overview\n","\n","In this section, we are going to create Document Term Matrices (DTM). <br>\n","In the DTM, each row represents a document. The columns correspond to the vocabulary words of the entire corpus of documents. <br>\n","Today, we'll learn three methods of computing the value in each cell. <br>\n","* `CountVectorizer` from `sklearn` provides a basic implementation: counts of appearances of words. You could also ignore multiple occurrences of words in a document, and just keep track of whether or not a word occurs in the document via a boolean value.<br>\n","* `TfidfVectorizer` is a more advanced implementation that keeps track of *term-frequency inverse-document frequency* (TF-IDF) instead of integer counts.\n","\n","* Word embeddings, an even more sophisticated method that helps solve the problem of accounting for the context of a word.\n","\n","**Discussion:** Don't we lose all the context and grammar if we do this? So Why does it work?"]},{"cell_type":"markdown","metadata":{"toc-hr-collapsed":true,"id":"TQQRch8mdRAD"},"source":["## Follow Along"]},{"cell_type":"markdown","metadata":{"id":"wVIflCt1dRAF"},"source":["**Warm Up (_3 Minutes_)**\n","\n","Extract the tokens from this sentence using Spacy. Text is from [OpenAI](https://openai.com/blog/better-language-models/)"]},{"cell_type":"code","metadata":{"id":"yg63BJ6-dRAG"},"source":["text = \"\"\"GPT-2 displays a broad set of capabilities, including the ability to generate conditional synthetic text samples of unprecedented quality, where we prime the model with an input and have it generate a lengthy continuation. In addition, GPT-2 outperforms other language models trained on specific domains (like Wikipedia, news, or books) without needing to use these domain-specific training datasets. On language tasks like question answering, reading comprehension, summarization, and translation, GPT-2 begins to learn these tasks from the raw text, using no task-specific training data. While scores on these downstream tasks are far from state-of-the-art, they suggest that the tasks can benefit from unsupervised techniques, given sufficient (unlabeled) data and compute.\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r9rHYGcKRX-n","executionInfo":{"status":"ok","timestamp":1638293101438,"user_tz":480,"elapsed":358,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"b15d75cc-07fe-4bda-8566-9e70877880ef"},"source":["doc = nlp(text)\n","tokens = []\n","tokens = [token.lemma_ for token in doc if (not token.is_stop) and (not token.is_punct)]\n","print(len(tokens))\n","tokens"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["73\n"]},{"output_type":"execute_result","data":{"text/plain":["['GPT-2',\n"," 'display',\n"," 'broad',\n"," 'set',\n"," 'capability',\n"," 'include',\n"," 'ability',\n"," 'generate',\n"," 'conditional',\n"," 'synthetic',\n"," 'text',\n"," 'sample',\n"," 'unprecedented',\n"," 'quality',\n"," 'prime',\n"," 'model',\n"," 'input',\n"," 'generate',\n"," 'lengthy',\n"," 'continuation',\n"," 'addition',\n"," 'GPT-2',\n"," 'outperform',\n"," 'language',\n"," 'model',\n"," 'train',\n"," 'specific',\n"," 'domain',\n"," 'like',\n"," 'Wikipedia',\n"," 'news',\n"," 'book',\n"," 'need',\n"," 'use',\n"," 'domain',\n"," 'specific',\n"," 'training',\n"," 'dataset',\n"," 'language',\n"," 'task',\n"," 'like',\n"," 'question',\n"," 'answer',\n"," 'read',\n"," 'comprehension',\n"," 'summarization',\n"," 'translation',\n"," 'GPT-2',\n"," 'begin',\n"," 'learn',\n"," 'task',\n"," 'raw',\n"," 'text',\n"," 'task',\n"," 'specific',\n"," 'training',\n"," 'datum',\n"," 'score',\n"," 'downstream',\n"," 'task',\n"," 'far',\n"," 'state',\n"," 'art',\n"," 'suggest',\n"," 'task',\n"," 'benefit',\n"," 'unsupervised',\n"," 'technique',\n"," 'give',\n"," 'sufficient',\n"," 'unlabeled',\n"," 'datum',\n"," 'compute']"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"5kJlWC4BdRAK"},"source":["-----\n","# 1.1 `CountVectorizer`\n","\n","![](https://images4.programmersought.com/947/0a/0acb9279d17a1631bcfb154583cca443.JPEG)"]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-c6a74f21ed3917ee","locked":false,"schema_version":3,"solution":true,"task":false},"id":"gRM5YA8KdRAK"},"source":["from sklearn.feature_extraction.text import CountVectorizer\n","\n","\n","# list of text documents\n","\n","# create the transformer\n","\n","# build vocab\n","\n","# transform text\n","\n","### BEGIN SOLUTION\n","# a corpus is a collection of text documents\n","corpus = [\"We created a new dataset which emphasizes diversity of content, by scraping content from the Internet.\",\n","          \" In order to preserve document quality, we used only pages which have been curated/filtered by humans—specifically, we used outbound links from Reddit which received at least 3 karma.\",\n","          \" This can be thought of as a heuristic indicator for whether other users found the link interesting (whether educational or funny), leading to higher data quality than other similar datasets, such as CommonCrawl.\"]\n","\n","# create the transformer\n","vect = CountVectorizer()\n","\n","# build vocabulary\n","vect.fit(corpus)\n","\n","# transform text to create the document-term matrix\n","dtm = vect.transform(corpus)\n","\n","# Create a Vocabulary\n","\n","### END SOLUTION"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M-qe8kTqD5oV","executionInfo":{"status":"ok","timestamp":1638293518770,"user_tz":480,"elapsed":388,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"049fe286-d7ab-42ff-c508-7a3cc9419421"},"source":["dtm"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<3x61 sparse matrix of type '<class 'numpy.int64'>'\n","\twith 69 stored elements in Compressed Sparse Row format>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-93323028a4bfd7e7","locked":false,"schema_version":3,"solution":true,"task":false},"scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"YGKln3xLdRAL","executionInfo":{"status":"ok","timestamp":1638293571271,"user_tz":480,"elapsed":360,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"0c7d5467-1af6-4d0b-84cc-458628e79049"},"source":["# explore the document-term matrix \n","\n","# Get feature names\n","\n","# print out raw text for comparison with  indexing \n","\n","# show indexing of token count \n","\n","# Dealing with Sparse Matrix\n","\n","# Get Word Counts for each document\n","\n","### BEGIN SOLUTION\n","\n","# Get feature names -- this is the \"vocablulary\" for the corpus\n","print(vect.get_feature_names())\n","\n","print(len(vect.get_feature_names()))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['as', 'at', 'be', 'been', 'by', 'can', 'commoncrawl', 'content', 'created', 'curated', 'data', 'dataset', 'datasets', 'diversity', 'document', 'educational', 'emphasizes', 'filtered', 'for', 'found', 'from', 'funny', 'have', 'heuristic', 'higher', 'humans', 'in', 'indicator', 'interesting', 'internet', 'karma', 'leading', 'least', 'link', 'links', 'new', 'of', 'only', 'or', 'order', 'other', 'outbound', 'pages', 'preserve', 'quality', 'received', 'reddit', 'scraping', 'similar', 'specifically', 'such', 'than', 'the', 'this', 'thought', 'to', 'used', 'users', 'we', 'whether', 'which']\n","61\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mcTytc3-kKIm","executionInfo":{"status":"ok","timestamp":1635265607873,"user_tz":420,"elapsed":207,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"ea6cae26-76a6-4ece-d8b9-33269ae02382"},"source":["# print out raw text for comparison with  indexing \n","corpus"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['We created a new dataset which emphasizes diversity of content, by scraping content from the Internet.',\n"," ' In order to preserve document quality, we used only pages which have been curated/filtered by humans—specifically, we used outbound links from Reddit which received at least 3 karma.',\n"," ' This can be thought of as a heuristic indicator for whether other users found the link interesting (whether educational or funny), leading to higher data quality than other similar datasets, such as CommonCrawl.']"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"99utB63ckHZO","executionInfo":{"status":"ok","timestamp":1638293681253,"user_tz":480,"elapsed":384,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"a087c451-e88f-46d2-bc04-7d56e2f377c6"},"source":["# show indexing of token count \n","print(dtm)\n","print(type(dtm))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  (0, 4)\t1\n","  (0, 7)\t2\n","  (0, 8)\t1\n","  (0, 11)\t1\n","  (0, 13)\t1\n","  (0, 16)\t1\n","  (0, 20)\t1\n","  (0, 29)\t1\n","  (0, 35)\t1\n","  (0, 36)\t1\n","  (0, 47)\t1\n","  (0, 52)\t1\n","  (0, 58)\t1\n","  (0, 60)\t1\n","  (1, 1)\t1\n","  (1, 3)\t1\n","  (1, 4)\t1\n","  (1, 9)\t1\n","  (1, 14)\t1\n","  (1, 17)\t1\n","  (1, 20)\t1\n","  (1, 22)\t1\n","  (1, 25)\t1\n","  (1, 26)\t1\n","  (1, 30)\t1\n","  :\t:\n","  (2, 10)\t1\n","  (2, 12)\t1\n","  (2, 15)\t1\n","  (2, 18)\t1\n","  (2, 19)\t1\n","  (2, 21)\t1\n","  (2, 23)\t1\n","  (2, 24)\t1\n","  (2, 27)\t1\n","  (2, 28)\t1\n","  (2, 31)\t1\n","  (2, 33)\t1\n","  (2, 36)\t1\n","  (2, 38)\t1\n","  (2, 40)\t2\n","  (2, 44)\t1\n","  (2, 48)\t1\n","  (2, 50)\t1\n","  (2, 51)\t1\n","  (2, 52)\t1\n","  (2, 53)\t1\n","  (2, 54)\t1\n","  (2, 55)\t1\n","  (2, 57)\t1\n","  (2, 59)\t2\n","<class 'scipy.sparse.csr.csr_matrix'>\n"]}]},{"cell_type":"markdown","metadata":{"id":"EBlsthyilfwE"},"source":["#### `dtm` is a sparse matrix, so next we convert it to a dense matrix"]},{"cell_type":"code","metadata":{"id":"jjwqUCU5lYAB"},"source":["#!pip install scipy\n","from scipy import sparse as sparse"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YocuiaT9knS2"},"source":["# Dealing with Sparse Matrix\n","dtm_sparse_matrix = dtm\n","dtm_dense_matrix = dtm_sparse_matrix.todense()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U3TSijzlFmvP","executionInfo":{"status":"ok","timestamp":1638293945133,"user_tz":480,"elapsed":162,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"e88a00b9-f556-4f30-b0dc-665eaf5cee7a"},"source":["dtm_dense_matrix"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["matrix([[0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n","         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n","         0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n","        [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n","         0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,\n","         1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 2],\n","        [2, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,\n","         1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 2, 0,\n","         0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, 0]])"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"xBq6oeR-FhIW"},"source":["# Get Word Counts for each document\n","dtm_new = pd.DataFrame(dtm_dense_matrix, columns=vect.get_feature_names())\n","### END SOLUTION"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"id":"dg3lw6qok5wR","executionInfo":{"status":"ok","timestamp":1635265892913,"user_tz":420,"elapsed":212,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"4f6c1dbb-c8f3-43cb-b24f-cef303198b63"},"source":["dtm_new"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>as</th>\n","      <th>at</th>\n","      <th>be</th>\n","      <th>been</th>\n","      <th>by</th>\n","      <th>can</th>\n","      <th>commoncrawl</th>\n","      <th>content</th>\n","      <th>created</th>\n","      <th>curated</th>\n","      <th>data</th>\n","      <th>dataset</th>\n","      <th>datasets</th>\n","      <th>diversity</th>\n","      <th>document</th>\n","      <th>educational</th>\n","      <th>emphasizes</th>\n","      <th>filtered</th>\n","      <th>for</th>\n","      <th>found</th>\n","      <th>from</th>\n","      <th>funny</th>\n","      <th>have</th>\n","      <th>heuristic</th>\n","      <th>higher</th>\n","      <th>humans</th>\n","      <th>in</th>\n","      <th>indicator</th>\n","      <th>interesting</th>\n","      <th>internet</th>\n","      <th>karma</th>\n","      <th>leading</th>\n","      <th>least</th>\n","      <th>link</th>\n","      <th>links</th>\n","      <th>new</th>\n","      <th>of</th>\n","      <th>only</th>\n","      <th>or</th>\n","      <th>order</th>\n","      <th>other</th>\n","      <th>outbound</th>\n","      <th>pages</th>\n","      <th>preserve</th>\n","      <th>quality</th>\n","      <th>received</th>\n","      <th>reddit</th>\n","      <th>scraping</th>\n","      <th>similar</th>\n","      <th>specifically</th>\n","      <th>such</th>\n","      <th>than</th>\n","      <th>the</th>\n","      <th>this</th>\n","      <th>thought</th>\n","      <th>to</th>\n","      <th>used</th>\n","      <th>users</th>\n","      <th>we</th>\n","      <th>whether</th>\n","      <th>which</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   as  at  be  been  by  can  ...  to  used  users  we  whether  which\n","0   0   0   0     0   1    0  ...   0     0      0   1        0      1\n","1   0   1   0     1   1    0  ...   1     2      0   2        0      2\n","2   2   0   1     0   0    1  ...   1     0      1   0        2      0\n","\n","[3 rows x 61 columns]"]},"metadata":{},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"DJWsLvkXdRAL"},"source":["**Three Minute Challenge:** \n","* Apply CountVectorizer to our BBC Data\n","* Store results in a dataframe called `dtm`\n","* Extra Challenge - Try to Customize CountVectorizer with Spacy Processing"]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-3a7cd500efe1978b","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"0LQrT4qydRAL","executionInfo":{"status":"ok","timestamp":1638294274561,"user_tz":480,"elapsed":348,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"64b63bd4-c092-4d2d-eb4c-a2bbf5b6bb97"},"source":["# Apply CountVectorizer to our Data\n","# Use custom Spacy Vectorizer\n","# BBC articles in `data` variable\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","#Learn our Vocab\n","\n","# Get sparse dtm (i.e. transform the data)\n","\n","### BEGIN SOLUTION\n","vect = CountVectorizer(stop_words='english', max_features=1000)\n","\n","#Learn our Vocab\n","vect.fit(data)\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CountVectorizer(max_features=1000, stop_words='english')"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XxttbcSKmuyy","executionInfo":{"status":"ok","timestamp":1638294306859,"user_tz":480,"elapsed":384,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"88983f22-67d8-49d6-be69-9dfd91fffe49"},"source":["# Get sparse dtm -- `vect.transform() produces a sparse matrix output, so we have to transform it back to a dense matrix and create a data frame!\n","dtm = vect.transform(data)\n","print(type(dtm))\n","dtm = pd.DataFrame(dtm.todense(), columns=vect.get_feature_names())\n","print(type(dtm))\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'scipy.sparse.csr.csr_matrix'>\n","<class 'pandas.core.frame.DataFrame'>\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QTJH4PrZU5Wp","executionInfo":{"status":"ok","timestamp":1638294321875,"user_tz":480,"elapsed":381,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"a1bc65b6-bd6a-4ee9-d307-6324526ad4da"},"source":["dtm.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(401, 1000)"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"Vqwt-wS3VPh3","executionInfo":{"status":"ok","timestamp":1638294335884,"user_tz":480,"elapsed":399,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"f1aac106-3a1d-4722-d167-2f68eb27a9df"},"source":["dtm"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>000</th>\n","      <th>10</th>\n","      <th>100</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>18</th>\n","      <th>20</th>\n","      <th>200</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>25</th>\n","      <th>30</th>\n","      <th>3d</th>\n","      <th>3g</th>\n","      <th>40</th>\n","      <th>50</th>\n","      <th>500</th>\n","      <th>60</th>\n","      <th>80</th>\n","      <th>ability</th>\n","      <th>able</th>\n","      <th>access</th>\n","      <th>according</th>\n","      <th>account</th>\n","      <th>accounts</th>\n","      <th>act</th>\n","      <th>action</th>\n","      <th>activity</th>\n","      <th>actually</th>\n","      <th>add</th>\n","      <th>added</th>\n","      <th>address</th>\n","      <th>addresses</th>\n","      <th>advantage</th>\n","      <th>age</th>\n","      <th>ago</th>\n","      <th>...</th>\n","      <th>wanted</th>\n","      <th>wants</th>\n","      <th>warned</th>\n","      <th>warning</th>\n","      <th>wars</th>\n","      <th>watch</th>\n","      <th>watching</th>\n","      <th>way</th>\n","      <th>ways</th>\n","      <th>web</th>\n","      <th>website</th>\n","      <th>websites</th>\n","      <th>week</th>\n","      <th>weeks</th>\n","      <th>went</th>\n","      <th>wi</th>\n","      <th>wide</th>\n","      <th>widely</th>\n","      <th>win</th>\n","      <th>windows</th>\n","      <th>wireless</th>\n","      <th>women</th>\n","      <th>won</th>\n","      <th>word</th>\n","      <th>words</th>\n","      <th>work</th>\n","      <th>worked</th>\n","      <th>working</th>\n","      <th>works</th>\n","      <th>world</th>\n","      <th>worldwide</th>\n","      <th>worm</th>\n","      <th>worth</th>\n","      <th>writing</th>\n","      <th>xbox</th>\n","      <th>xp</th>\n","      <th>yahoo</th>\n","      <th>year</th>\n","      <th>years</th>\n","      <th>york</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>396</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>397</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>398</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>400</th>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>401 rows × 1000 columns</p>\n","</div>"],"text/plain":["     000  10  100  11  12  14  15  ...  writing  xbox  xp  yahoo  year  years  york\n","0      0   2    0   0   0   0   0  ...        0     0   0      0     0      0     0\n","1      0   2    0   0   0   0   0  ...        0     0   0      0     2      0     0\n","2      1   0    1   0   0   0   0  ...        0     0   0      0     3      2     0\n","3      2   0    0   0   0   0   0  ...        0     0   0      0     0      0     0\n","4      0   1    0   0   0   0   0  ...        0     0   0      0     0      0     0\n","..   ...  ..  ...  ..  ..  ..  ..  ...      ...   ...  ..    ...   ...    ...   ...\n","396    0   2    0   0   1   0   1  ...        0     0   0      0     0      0     0\n","397    0   1    0   0   0   0   0  ...        0    12   0      0     0      0     0\n","398    0   0    2   0   2   0   0  ...        0     0   0      0     6      1     0\n","399    1   0    0   0   1   0   0  ...        1     0   0      0     0      0     0\n","400    3   2    0   0   0   0   0  ...        0     0   0      0     1      1     2\n","\n","[401 rows x 1000 columns]"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uxB6-jhj94JR","executionInfo":{"status":"ok","timestamp":1638294601354,"user_tz":480,"elapsed":405,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"fe903e85-c18f-4f31-f742-2c879c18883a"},"source":["type(data[0])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-be6FsEudGn3","executionInfo":{"status":"ok","timestamp":1635266148250,"user_tz":420,"elapsed":206,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"3979a257-cfa0-4d2f-bc9c-bc2dacb70ced"},"source":["len(data[0])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3647"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"HEkbUj_-dRAM"},"source":["# dist of document lengths measured by num of characters in document\n","doc_len = [len(doc) for doc in data]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":322},"id":"G6JBj-YUdRAM","executionInfo":{"status":"ok","timestamp":1638294629060,"user_tz":480,"elapsed":409,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"dc3294b4-3b9d-4da9-f9d8-7368925a5298"},"source":["import seaborn as sns\n","sns.distplot(doc_len);"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SYgUj_WcdRAN"},"source":["#1.2  `TfidfVectorizer`\n","\n","## Term Frequency - Inverse Document Frequency (TF-IDF)\n","\n","![](https://miro.medium.com/max/1404/1*mu6G-cBmWlENS4pWHEnGcg@2x.jpeg)\n","\n","\n","**Term Frequency**: $\\text{tf}_{i,j}$  is the number of times term $i$ appeared in document $j$ \n","\n","**Inverse Document Frequency:** A weight penalty for terms that exist in a high fraction of documents.\n","\n","The purpose of TF-IDF is to find what is **unique** to each document. Because of this we will penalize the term frequencies of words that are common across all documents. This effectively upweights terms that are rarer across documents.\n"]},{"cell_type":"markdown","metadata":{"id":"yfzMqqbrdRAN"},"source":["![](https://upload.wikimedia.org/wikipedia/commons/8/81/Logarithm_plots.png)\n","\n","It's useful to reference both the algebraic and geometric representations of a single mathematical ideal whenever possible in order to build the fullest understanding possible. "]},{"cell_type":"markdown","metadata":{"id":"1uysxF1NdRAN"},"source":["The IDF portion of the TF-IDF equation has been coded up below so that we can play around with the values and get a better understanding of how this portion of the equation works. \n","\n","NOTE: There are other ways to construct the equation for the IDF term; different constructions of the equation serve different purposes and which you ultimately use simply depends on your problem/task. You can check out the [wikipedia article on tfidf](https://en.wikipedia.org/wiki/Tf%E2%80%93idf)\n","\n","In practice, you usually don't even have to think about the mathematical formulation of the IDF term. You simply import the tfidf vectorizer and use its api. The rare exception to this would if you are working a very particular kind of problem where the open source implementation of tfidf doesn't suit your needs and so then you might consider creating your own equation or using a different one that you read about. "]},{"cell_type":"code","metadata":{"id":"Sk_AVqh3dRAN"},"source":["# inverse document frequency score \n","# the plus ones are constants that shift the around the baseline value \n","def idf(n, df):\n","    \"\"\"\n","    Parameters\n","    ----------\n","    n: int\n","        num of docs in corpus \n","        \n","    df: int\n","        num of docs that term t (i.e. a token) appears in \n","\n","    Returns\n","    -------\n","    inverse docuemnt frequency: float\n","    \"\"\"\n","    return np.log( n/ df) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-4e40eb25d7faed91","locked":false,"schema_version":3,"solution":true,"task":false},"id":"1uh6Ab7FdRAO"},"source":["###BEGIN SOLUTION\n","n = 100 # num of docs in corpus \n","df_range = 100\n","IDF = []\n","DF = []\n","for df in range(1, df_range + 1):\n","    idf_score = idf(n, df)\n","    IDF.append(idf_score)\n","    DF.append(df)\n","###END SOLUTION"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"qVAUfwlddRAO","executionInfo":{"status":"ok","timestamp":1635212058655,"user_tz":420,"elapsed":568,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"828fcfa6-2fff-46ae-cafd-190ebe59a317"},"source":["plt.figure()\n","plt.title(\"Inverse Document Frequency Score vs. Document Frequency of Token\")\n","plt.ylabel(\"Inverse Document Frequency Score\")\n","plt.xlabel(\"Document Frequency of Token\")\n","plt.grid()\n","plt.plot(DF, IDF);\n","plt.show()\n","\n","plt.figure()\n","plt.title(\"Inverse Document Frequency Score vs. Document Frequency of Token\")\n","plt.ylabel(\"Inverse Document Frequency Score\")\n","plt.xlabel(\"Document Frequency of Token\")\n","plt.xlim(95,100)\n","plt.ylim(0,0.10)\n","plt.grid()\n","plt.plot(DF, IDF);\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-bed0fb42b084357d","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"G7dv3fH2dRAO","executionInfo":{"status":"ok","timestamp":1635212065517,"user_tz":420,"elapsed":175,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"e91ecbdf-967e-4e6d-e263-1e39022a8777"},"source":["# let's work through a couple of examples to help build intuition \n","\n","# imagine the token we are considering is \"purchase\", which rarely appears\n","\n","# imagine the token that we are considering is \"the\", which appears often\n","\n","\n","###BEGIN SOLUTION\n","n = 100 # num of docs in corpus\n","\n","# imagine the token we are considering is \"purchase\"\n","tf = 1\n","df = 20\n","\n","tfidf_score = tf * idf(n, df)\n","print(f'purchase: {tfidf_score:.2f}')\n","\n","###END SOLUTION\n","# imagine the token that we are considering is \"the\"\n","tf = 50\n","df = 95\n","\n","tfidf_score = tf * idf(n, df)\n","print(f'the: {tfidf_score:.2f}')\n","###END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["purchase: 1.61\n","the: 2.56\n"]}]},{"cell_type":"markdown","metadata":{"id":"SQbFzVXAdRAP"},"source":["Now that we have built some intuition on how TFIDF works, let's use `sklearn`'s `TfidfVectorizer` to vectorize our dataset. <br>\n","Note that `TfidfVectorizer` is used with the same syntax as `CountVectorizer`"]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-4ccfa3ef2d0404fc","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/","height":293},"id":"Lm6FsqHOdRAP","executionInfo":{"status":"ok","timestamp":1638295065707,"user_tz":480,"elapsed":735,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"ad3e2822-ed7e-40f7-8751-cfe409c1339f"},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","### BEGIN SOLUTION\n","# 1. Instantiate vectorizer object\n","tfidf = TfidfVectorizer(stop_words='english', max_features=1000)\n","\n","# 2. Create a vocabulary and get word counts per document\n","dtm = tfidf.fit_transform(data)\n","\n","# 3. View term-document matrix as DataFrame\n","dtm = pd.DataFrame(dtm.todense(), columns=tfidf.get_feature_names())\n","dtm.head()\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>000</th>\n","      <th>10</th>\n","      <th>100</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>18</th>\n","      <th>20</th>\n","      <th>200</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>25</th>\n","      <th>30</th>\n","      <th>3d</th>\n","      <th>3g</th>\n","      <th>40</th>\n","      <th>50</th>\n","      <th>500</th>\n","      <th>60</th>\n","      <th>80</th>\n","      <th>ability</th>\n","      <th>able</th>\n","      <th>access</th>\n","      <th>according</th>\n","      <th>account</th>\n","      <th>accounts</th>\n","      <th>act</th>\n","      <th>action</th>\n","      <th>activity</th>\n","      <th>actually</th>\n","      <th>add</th>\n","      <th>added</th>\n","      <th>address</th>\n","      <th>addresses</th>\n","      <th>advantage</th>\n","      <th>age</th>\n","      <th>ago</th>\n","      <th>...</th>\n","      <th>wanted</th>\n","      <th>wants</th>\n","      <th>warned</th>\n","      <th>warning</th>\n","      <th>wars</th>\n","      <th>watch</th>\n","      <th>watching</th>\n","      <th>way</th>\n","      <th>ways</th>\n","      <th>web</th>\n","      <th>website</th>\n","      <th>websites</th>\n","      <th>week</th>\n","      <th>weeks</th>\n","      <th>went</th>\n","      <th>wi</th>\n","      <th>wide</th>\n","      <th>widely</th>\n","      <th>win</th>\n","      <th>windows</th>\n","      <th>wireless</th>\n","      <th>women</th>\n","      <th>won</th>\n","      <th>word</th>\n","      <th>words</th>\n","      <th>work</th>\n","      <th>worked</th>\n","      <th>working</th>\n","      <th>works</th>\n","      <th>world</th>\n","      <th>worldwide</th>\n","      <th>worm</th>\n","      <th>worth</th>\n","      <th>writing</th>\n","      <th>xbox</th>\n","      <th>xp</th>\n","      <th>yahoo</th>\n","      <th>year</th>\n","      <th>years</th>\n","      <th>york</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.089633</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.055181</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.059792</td>\n","      <td>0.0</td>\n","      <td>0.045606</td>\n","      <td>0.038921</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000</td>\n","      <td>0.044817</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.055874</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.039781</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","      <td>0.074491</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.038941</td>\n","      <td>0.038763</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.047655</td>\n","      <td>0.061005</td>\n","      <td>0.366027</td>\n","      <td>0.0</td>\n","      <td>0.045859</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.058224</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.044</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.042121</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.029979</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.053033</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.046216</td>\n","      <td>0.000000</td>\n","      <td>0.066769</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.076253</td>\n","      <td>0.131862</td>\n","      <td>0.055640</td>\n","      <td>0.055385</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.087163</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.046216</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.151205</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.120366</td>\n","      <td>0.0</td>\n","      <td>0.159666</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.083191</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.079068</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.079833</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.113660</td>\n","      <td>0.098872</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.050839</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.041940</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.059571</td>\n","      <td>0.025419</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.043909</td>\n","      <td>0.0</td>\n","      <td>0.028655</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.041235</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000</td>\n","      <td>0.000000</td>\n","      <td>0.026980</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.522154</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.324351</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","      <td>0.037166</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.038859</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.05748</td>\n","      <td>0.058101</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.054381</td>\n","      <td>0.000</td>\n","      <td>0.037166</td>\n","      <td>0.034259</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.029915</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 1000 columns</p>\n","</div>"],"text/plain":["        000        10       100   11   12  ...   xp  yahoo      year     years  york\n","0  0.000000  0.089633  0.000000  0.0  0.0  ...  0.0    0.0  0.000000  0.000000   0.0\n","1  0.000000  0.074491  0.000000  0.0  0.0  ...  0.0    0.0  0.053033  0.000000   0.0\n","2  0.046216  0.000000  0.066769  0.0  0.0  ...  0.0    0.0  0.113660  0.098872   0.0\n","3  0.050839  0.000000  0.000000  0.0  0.0  ...  0.0    0.0  0.000000  0.000000   0.0\n","4  0.000000  0.037166  0.000000  0.0  0.0  ...  0.0    0.0  0.000000  0.000000   0.0\n","\n","[5 rows x 1000 columns]"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"n_VFnOHrMMtT"},"source":["Now let's get a little fancier with the `TfidfVEctorizer`: we'll use the keywords `ngram_range`, `max_df`, `min_df` and `tokenizer` to accomplish the following:\n","- Build a vocabulary from unigrams and bigrams\n","- Do \"statistical trimming\" by ignoring all terms with document frequency higher than `max_df` and all terms with document frequency lower than `min_df`\n","- Use the `spaCy` tokenizer that we built "]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-0667a7a2ebea2224","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"cKB5QWy-dRAQ","executionInfo":{"status":"ok","timestamp":1638310756575,"user_tz":480,"elapsed":32520,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"be03d1d3-bd3d-44d1-d123-9ef58f855355"},"source":["%%time\n","# Tuning Parameters\n","\n","# Instantiate vectorizer object\n","\n","# Create a vocabulary and get word counts per document\n","\n","# Print word counts\n","\n","# Get feature names to use as dataframe column headers\n","\n","# View Feature Matrix as DataFrame\n","\n","### BEGIN SOLUTION\n","# Instantiate vectorizer object (ngram_range includes unigrams and bigrams)\n","tfidf = TfidfVectorizer(ngram_range=(1,2),\n","                        max_df=.97, # \"statistical trimming\"\n","                        min_df=.03, # \"statistical trimming\"\n","                        tokenizer=tokenize)\n","\n","# Create a vocabulary and get word counts per document\n","dtm = tfidf.fit_transform(data) # Similiar to fit_predict -- produces a sparse matrix\n","\n","# Print word counts\n","\n","# Get feature names to use as dataframe column headers\n","dtm = pd.DataFrame(dtm.todense(), columns=tfidf.get_feature_names_out())\n","\n","# View Feature Matrix as DataFrame\n","\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 32.1 s, sys: 249 ms, total: 32.4 s\n","Wall time: 32.4 s\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tbL0rm6D7PeG","executionInfo":{"status":"ok","timestamp":1638310681694,"user_tz":480,"elapsed":156,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"9335683b-abed-4946-e65b-2670cb626dd6"},"source":["tfidf.get_feature_names_out()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['1,000', '10', '100', ..., 'year say', 'york', 'young'],\n","      dtype=object)"]},"metadata":{},"execution_count":191}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"id":"kWJZl78z__ay","executionInfo":{"status":"ok","timestamp":1638310782410,"user_tz":480,"elapsed":178,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"945e690d-c3bd-45bc-960f-5328e0a4a4c9"},"source":["dtm.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1,000</th>\n","      <th>10</th>\n","      <th>100</th>\n","      <th>100,000</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>12 month</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>18 month</th>\n","      <th>2,000</th>\n","      <th>20</th>\n","      <th>200</th>\n","      <th>2000</th>\n","      <th>2001</th>\n","      <th>2002</th>\n","      <th>2003</th>\n","      <th>2004</th>\n","      <th>2005</th>\n","      <th>2006</th>\n","      <th>22</th>\n","      <th>24</th>\n","      <th>25</th>\n","      <th>28</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>3d</th>\n","      <th>40</th>\n","      <th>50</th>\n","      <th>50,000</th>\n","      <th>60</th>\n","      <th>80</th>\n","      <th>90</th>\n","      <th>95</th>\n","      <th>ability</th>\n","      <th>able</th>\n","      <th>...</th>\n","      <th>warning</th>\n","      <th>watch</th>\n","      <th>watch tv</th>\n","      <th>water</th>\n","      <th>wave</th>\n","      <th>way</th>\n","      <th>way people</th>\n","      <th>wear</th>\n","      <th>web</th>\n","      <th>website</th>\n","      <th>week</th>\n","      <th>well</th>\n","      <th>wi</th>\n","      <th>wi fi</th>\n","      <th>wide</th>\n","      <th>wide range</th>\n","      <th>widely</th>\n","      <th>win</th>\n","      <th>window</th>\n","      <th>windows</th>\n","      <th>wireless</th>\n","      <th>woman</th>\n","      <th>word</th>\n","      <th>work</th>\n","      <th>world</th>\n","      <th>world service</th>\n","      <th>worldwide</th>\n","      <th>worm</th>\n","      <th>worry</th>\n","      <th>worth</th>\n","      <th>write</th>\n","      <th>writer</th>\n","      <th>xbox</th>\n","      <th>xp</th>\n","      <th>yahoo</th>\n","      <th>year</th>\n","      <th>year ago</th>\n","      <th>year say</th>\n","      <th>york</th>\n","      <th>young</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.091897</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.062030</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.059277</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.07739</td>\n","      <td>0.044753</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.061066</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.032053</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","      <td>0.075147</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.038262</td>\n","      <td>0.038801</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.059941</td>\n","      <td>0.0</td>\n","      <td>0.050724</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.024927</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.037406</td>\n","      <td>0.087978</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.029261</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.046052</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.070485</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.069949</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.127996</td>\n","      <td>0.054009</td>\n","      <td>0.054768</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.084608</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.105599</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.200981</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.077493</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.162510</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.042383</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.019405</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.437229</td>\n","      <td>0.437229</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.271597</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","      <td>0.036868</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.037544</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.057414</td>\n","      <td>0.056135</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.048917</td>\n","      <td>0.0</td>\n","      <td>0.00000</td>\n","      <td>0.035908</td>\n","      <td>0.028430</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.028712</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 1274 columns</p>\n","</div>"],"text/plain":["      1,000        10       100  100,000  ...  year ago  year say  york  young\n","0  0.000000  0.091897  0.000000      0.0  ...       0.0       0.0   0.0    0.0\n","1  0.000000  0.075147  0.000000      0.0  ...       0.0       0.0   0.0    0.0\n","2  0.000000  0.000000  0.070485      0.0  ...       0.0       0.0   0.0    0.0\n","3  0.042383  0.000000  0.000000      0.0  ...       0.0       0.0   0.0    0.0\n","4  0.000000  0.036868  0.000000      0.0  ...       0.0       0.0   0.0    0.0\n","\n","[5 rows x 1274 columns]"]},"metadata":{},"execution_count":193}]},{"cell_type":"markdown","metadata":{"id":"jTMPm-hbdRAQ"},"source":["## Challenge\n","\n","During this module's project assignment, you will transform data science job listings to vector representations for analysis downstream. "]},{"cell_type":"markdown","metadata":{"id":"oddqm9omdRAR"},"source":["# 2. Query Documents by Similarity (Learn)\n","<a id=\"p2\"></a>"]},{"cell_type":"markdown","metadata":{"id":"myAGpeGOdRAR"},"source":["## Overview\n","\n","Have you ever considered how a search bar works in Google? You may just think that search bars simply match your input text against the documents. While there are many different mechanisms for the 'match', one of the most classic is to search by similarity. We will apply two measures of similarity between a document and the input query document: the **Cosine Similarity** between the documents and the **Euclidean distance** between the documents. <br>\n","\n","Cosine Similarity is [more compute intensive](https://stackoverflow.com/questions/28917985/why-cosine-distance-is-much-slower-than-using-euclidean-distance-with-dbscan-alg) than Euclidean distance."]},{"cell_type":"markdown","metadata":{"toc-hr-collapsed":true,"id":"GG_E_NYfdRAR"},"source":["## Follow Along\n","*Cosine similarity* and *nearest-neighbor distance* provide two measures that can be used to gauge the similarity of one word to another. <br>\n","We develop these concepts in this section."]},{"cell_type":"markdown","metadata":{"id":"m_vR2dvwdRAS"},"source":["### 2.1 Cosine Similarity\n","The [`cosine_simlarity`](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise.cosine_similarity.html) between two feature vectors is the dot product of the *normalized* feature vectors. <br>To *normalize* a vector, you simply divide it by its length: thus<br><br>\n","$\\text{cosine_similarity}(\\textbf{u},\\textbf{v})= \\frac{\\textbf{u}}{\\left\\|\\textbf{u}\\right\\|} \\cdot \\frac{\\textbf{v}}{\\left\\|\\textbf{v}\\right\\|}$, <br><br>\n","where $\\left\\|\\textbf{u}\\right\\|$ is the length of the vector $\\textbf{u}$<br><br>\n","\n","$\\textbf{cosine_similarity}$ is in the interval $[0, 1]$, <br><br>\n","The larger the $\\textbf{cosine_similarity}$, the more similar the words are, and vice-versa.<br><br>\n","\n","`cosine_similarity` takes as input the document-term matrix <br>\n","and creates a **similarity matrix** in which the rows and columns represent documents <br>\n","and entry ($i, j$) is the cosine similarity between documents $i$ and $j$.<br><br>\n","\n","Let's compute the **similarity matrix** for the BBC tech articles corpus<br>\n","\n"]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-76ce78f9798d38bc","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"-PunUo9xdRAS","executionInfo":{"status":"ok","timestamp":1638311181305,"user_tz":480,"elapsed":156,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"1b991fc4-28b6-4750-b4a3-793d05593094"},"source":["%%time\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# Calculate Distance of TF-IDF Vectors\n","\n","# Turn it into a DataFrame\n","\n","# Our Similarity Matrix is ? size \n","\n","# Each row is the similarity of one document to all other documents (including itself)\n","\n","# Grab the row and pick off the indicies of the most/least similar docs\n","\n","### BEGIN SOLUTION\n","\n","# Calculate Distance of TF-IDF Vectors\n","from sklearn.metrics.pairwise import cosine_similarity\n","\n","# similarity matrix\n","dist_matrix  = cosine_similarity(dtm)\n","\n","# Turn it into a DataFrame\n","df = pd.DataFrame(dist_matrix)\n","\n","# Size of the Similarity Matrix \n","print(df.shape)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(401, 401)\n","CPU times: user 19.9 ms, sys: 6.12 ms, total: 26 ms\n","Wall time: 20.3 ms\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jMaFFxxV9k6e","executionInfo":{"status":"ok","timestamp":1638315808096,"user_tz":480,"elapsed":151,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"10dbcf9e-a3a8-4382-f7d0-9383fae707e4"},"source":["print(np.min(dist_matrix))\n","print(np.max(dist_matrix))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.0\n","1.0000000000000009\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XDtkkqU8Qx25","executionInfo":{"status":"ok","timestamp":1638304631935,"user_tz":480,"elapsed":144,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"f70f5761-2e63-46e6-d9b6-786eb349a5da"},"source":["# Each row is the similarity of one document to all other documents (including itself)\n","df.iloc[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      1.000000\n","1      0.085655\n","2      0.054489\n","3      0.064005\n","4      0.083758\n","         ...   \n","396    0.068572\n","397    0.067169\n","398    0.099394\n","399    0.077293\n","400    0.371695\n","Name: 0, Length: 401, dtype: float64"]},"metadata":{},"execution_count":175}]},{"cell_type":"markdown","metadata":{"id":"WFV_5FzLijNo"},"source":["### Find the most similar documents to the first document"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JW0zaZkFQtgS","executionInfo":{"status":"ok","timestamp":1638311476069,"user_tz":480,"elapsed":145,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"76cfe24a-964c-4616-c11e-f5a7c10b17a1"},"source":["# Grab the first row and return the indices of the 6 most similar docs\n","print(df[0].sort_values(ascending=False)[:6])\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0      1.000000\n","177    1.000000\n","141    0.421637\n","400    0.371695\n","306    0.339871\n","185    0.231232\n","Name: 0, dtype: float64\n"]}]},{"cell_type":"markdown","metadata":{"id":"msStkSPqdRAS"},"source":["### 2.2 K Nearest Neighbors Search (kNN) \n","![](https://miro.medium.com/max/753/0*jqxx3-dJqFjXD6FA)\n","\n","\n","Nearest Neighbor models are distance based algorithms. They store your training set in memory. \n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"CD4Oru_DlAhu"},"source":["### `scikit-learn`'s `NearestNeighbors` class \n","computes distances between all pairs of data points, <br>\n","and returns the result in the form of a similarity matrix. <br>\n","Entry $(i,j)$ in the similarity matrix records the similarity of data points $i$ and $j$.<br>\n","\n","Below is an example using `NearestNeighbors` to find the most similar documents to a given documentL\n"]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-eac83ba5d76f6bf2","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"OaF7cC7jdRAS","executionInfo":{"status":"ok","timestamp":1638311609937,"user_tz":480,"elapsed":150,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"60b8d0b0-51cd-403a-f083-de051fa5d769"},"source":["%%time\n","from sklearn.neighbors import NearestNeighbors\n","\n","# Instantiate the nearest neighbors model\n","nn = NearestNeighbors()\n","\n","# fit to our document term matrix\n","nn.fit(dtm.values)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 1.94 ms, sys: 0 ns, total: 1.94 ms\n","Wall time: 2 ms\n"]}]},{"cell_type":"markdown","metadata":{"id":"tPbW_1sum9NP"},"source":["Find the 5 most similar documents to a query document; here we will choose the first document as our query document"]},{"cell_type":"code","metadata":{"id":"krvdbifUpi4X"},"source":["# sample a doc from a dtm to use as our query point\n","doc_index = 0\n","query_doc = dtm.values[0][None,:] # re-cast as a row vector \n","\n","# Query Using the kneighbors method\n","# NOTE: nn counts the original document as one of the neighbors, so if we want 5 nearest neighbors, we should set n_neightbors=6\n","neigh_dist, neigh_index = nn.kneighbors(query_doc,n_neighbors=6)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3SUrN_YrvPsK","executionInfo":{"status":"ok","timestamp":1638311665039,"user_tz":480,"elapsed":174,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"9c91dc61-b4ce-431e-d460-9c7b5901b0ea"},"source":["# nearest neighbor search returns the same documents as cosine similarity!\n","print(neigh_index)\n","print(neigh_dist)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0 177 141 400 306 185]]\n","[[0.         0.         1.07551182 1.12098631 1.14902515 1.23997457]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"-L2C1NXokg1w"},"source":["####We found a duplicate entry in the articles database!\n","Articles $0$ and $177$ are identical"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"6whC43iwp2LC","executionInfo":{"status":"ok","timestamp":1638305561286,"user_tz":480,"elapsed":167,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"e260d39d-aae1-48dc-c636-ec9f0d6da61e"},"source":["data[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Latest Opera browser gets vocal\\n\\nNet browser Opera 8.0, due for official release at the end of next month, will be \"the most accessible browser on the market\", according to its authors.\\n\\nThe latest version of the net browser can be controlled by voice command and will read pages aloud. The voice features, based on IBM technology, are currently only available in the Windows version. Opera can also magnify text by up to 10 times and users can create \"style sheets\", its developers say. This will enable them to view pages with colours and fonts that they prefer. But the browser does not yet work well with screen reader software often used by blind people, so its accessibility features are more likely to appeal to those with some residual vision. \"Our mission was always to provide the best internet experience for everyone,\" said Opera spokeswoman, Berit Hanson. \"So we would obviously not want to exclude disabled computer users.\"\\n\\nAnother feature likely to appeal to people with low vision is the ability to make pages fit to the screen width, which eliminates the need for horizontal scrolling.\\n\\nThe company points out that this will also appeal to anyone using Opera with a handheld device. The company says that features like voice activation are not solely aimed at visually impaired people. \"Our idea was to take a first step in making human-computer interaction more natural,\" said Ms Hanson. \"People are not always in a situation where they can access a keyboard, so this makes the web a more hands-free experience.\" Unlike commercially available voice recognition software, Opera does not have to be \"trained\" to recognise an individual voice. Around 50 voice commands are available and users will have to wear a headset which incorporates a microphone. The voice recognition function is currently only available in English. Opera is free to download but a paid-for version comes without an ad banner in the top right hand corner and with extra support. Opera began life as a research project - a spin-off from Norwegian telecoms company Telenor. Its browser is used by an estimated 10 million people on a variety of operating systems and a number of different platforms.\\n'"]},"metadata":{},"execution_count":189}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"PDM_NrH7IBr8","executionInfo":{"status":"ok","timestamp":1638304689524,"user_tz":480,"elapsed":168,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"b4b57de1-35b5-4fc4-a5f4-276bfd45971d"},"source":["data[177]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Latest Opera browser gets vocal\\n\\nNet browser Opera 8.0, due for official release at the end of next month, will be \"the most accessible browser on the market\", according to its authors.\\n\\nThe latest version of the net browser can be controlled by voice command and will read pages aloud. The voice features, based on IBM technology, are currently only available in the Windows version. Opera can also magnify text by up to 10 times and users can create \"style sheets\", its developers say. This will enable them to view pages with colours and fonts that they prefer. But the browser does not yet work well with screen reader software often used by blind people, so its accessibility features are more likely to appeal to those with some residual vision. \"Our mission was always to provide the best internet experience for everyone,\" said Opera spokeswoman, Berit Hanson. \"So we would obviously not want to exclude disabled computer users.\"\\n\\nAnother feature likely to appeal to people with low vision is the ability to make pages fit to the screen width, which eliminates the need for horizontal scrolling.\\n\\nThe company points out that this will also appeal to anyone using Opera with a handheld device. The company says that features like voice activation are not solely aimed at visually impaired people. \"Our idea was to take a first step in making human-computer interaction more natural,\" said Ms Hanson. \"People are not always in a situation where they can access a keyboard, so this makes the web a more hands-free experience.\" Unlike commercially available voice recognition software, Opera does not have to be \"trained\" to recognise an individual voice. Around 50 voice commands are available and users will have to wear a headset which incorporates a microphone. The voice recognition function is currently only available in English. Opera is free to download but a paid-for version comes without an ad banner in the top right hand corner and with extra support. Opera began life as a research project - a spin-off from Norwegian telecoms company Telenor. Its browser is used by an estimated 10 million people on a variety of operating systems and a number of different platforms.\\n'"]},"metadata":{},"execution_count":183}]},{"cell_type":"markdown","metadata":{"id":"LhG-KESidGIn"},"source":["### Exercise: \n","Search the BBC dataset for documents most similar to a random query doc"]},{"cell_type":"code","metadata":{"id":"ouWYmCawdRAT"},"source":["rndm_tech_article = [ \"\"\"\n","Blockchain technology encompasses so much more than just cryptocurrencies these days. And while these currencies are by far blockchain’s most famous use case, the potential for blockchain far, far exceeds a straightforward transfer of value.\n","The gaming industry, for example, has always been fairly controversial due to a range of issues. Many players feel particularly worried about the protection of their data, fraudulent activities, high fees, and most of all, unfair and hidden odds.\n","In these cases, P2P doesn’t just mean peer-to-peer; it means player-to-player. As with the other P2P industries that blockchain is disrupting, such as FinTech, there are already plenty of ways in which blockchain technology is being applied to resolve these issues and many more of the challenges faced by the gaming industry. Here are just a few.\n","Reducing fraud\n","The gaming industry suffers a lot from online fraud. One of the main advantages of blockchain technology is that it enables highly secure data encryption. What’s more, all of it is entirely accessible and transparent to the player. In other words, blockchain is a for game changer for venues such as online casinos, lotteries, and virtually anything which relies on random number generation.\n","On top of this, hackers will have particularly hard time, if it is even possible, to destroy a decentralized blockchain network, making sure gamer data stays safe. This is an inherent feature of distributed ledger technology whereby nodes in the ledger maintain the distributed databases in a shared manner, and each node has the complete information in the entire database.\n","\"\"\"]\n","\n","\n","# fit tfidf to the corpora and transform the corpora to get a term-document matrix\n","# transform the rndm_tech_article to get its document vector\n","\n","# Query Using kneighbors \n","# use k Nearest Neighbors to find the most similar documents in our document term matrix to the query\n","\n","# Inspect the most similar documents "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RaSuFg0ldRAT"},"source":["## Challenge\n","\n","In the module project assignment, you will apply one of these search techniques to retrieve documents related to a query document. "]},{"cell_type":"markdown","metadata":{"id":"3ugKeF8odRAT"},"source":["# 3. Apply word embedding models to create document vectors (Learn)\n","<a id=\"p3\"></a>\n"]},{"cell_type":"markdown","metadata":{"id":"K5wmBPMUdRAU"},"source":["## Overview\n","### Bag of Words (BoW) models lose information about context\n","\n","One of the limitations of Bag-of-Words approaches is that any information about the context surrounding that word is lost. This also means that with bag-of-words approaches often the only tools that we have for identifying words with similar usage or meaning and subsequently consolidating them into a single vector is through the processes of stemming and lemmatization which tend to be quite limited at consolidating words unless the two words are very close in their spelling or in their root parts-of-speech.\n","\n","### Embedding approaches preserve more textual context\n","Word2Vec is an increasingly popular word embedding technique. Like Bag-of-words it learns a real-value vector representation for a predefined fixed-size vocabulary that is generated from a corpus of text. However, in contrast to BoW, Word2Vec approaches are much more capable of accounting for textual context, and are better at discovering words with similar meanings or usages (semantic or syntactic similarity).\n","\n","##3.1 Word2Vec Intuition\n","Reference: [Deep NLP: Word Vectors with Word2Vec](https://medium.com/deep-learning-demystified/deep-nlp-word-vectors-with-word2vec-d62cb29b40b3)\n","### The Distribution Hypothesis\n","\n","In order to understand how Word2Vec preserves textual context we have to understand what's called the [Distribution Hypothesis](https://en.wikipedia.org/wiki/Distributional_semantics). The Distribution Hypothesis operates under the assumption that words that have similar contexts will have similar meanings. Practically speaking, this means that if two words are found to have similar words both to the right and to the left of them throughout the corpora then those words have the same context and are assumed to have the same meaning. \n","\n","> \"You shall know a word by the company it keeps\" - John Firth\n","\n","This means that we let the usage of a word define its meaning and its \"similarity\" to other words. In the following example, which words would you say have a similar meaning? \n","\n","**Sentence 1**: Traffic was light today\n","\n","**Sentence 2**: Traffic was heavy yesterday\n","\n","**Sentence 3**: Prediction is that traffic will be smooth-flowing tomorrow since it is a national holiday\n","\n","What words in the above sentences seem to have a similar meaning if all you knew about them was the context in which they appeared above? \n","\n","Lets take a look at how this might work in action, the following example is simplified, but will give you an idea of the intuition for how this works.\n","\n","#### Corpora:\n","\n","1) \"It was the sunniest of days.\"\n","\n","2) \"It was the rainiest of days.\"\n","\n","#### Vocabulary:\n","\n","{\"it\": 1, \"was\": 2, \"the\": 3, \"of\": 4, \"days\": 5, \"sunniest\": 6, \"rainiest\": 7}\n","\n","### Vectorization\n","\n","|       doc   | START_was | it_the | was_sunniest | the_of | sunniest_days | of_it | days_was | it_the | was_rainiest | rainiest_days | of_END |\n","|----------|-----------|--------|--------------|--------|---------------|-------|----------|--------|-------------|--------------|--------|\n","| it       | 1         | 0      | 0            | 0      | 0             | 0     | 1        | 0      | 0           | 0            | 0      |\n","| was      | 0         | 1      | 0            | 0      | 0             | 0     | 0        | 1      | 0           | 0            | 0      |\n","| the      | 0         | 0      | 1            | 0      | 0             | 0     | 0        | 0      | 1           | 0            | 0      |\n","| sunniest | 0         | 0      | 0            | 1      | 0             | 0     | 0        | 0      | 0           | 0            | 0      |\n","| of       | 0         | 0      | 0            | 0      | 1             | 0     | 0        | 0      | 0           | 1            | 0      |\n","| days     | 0         | 0      | 0            | 0      | 0             | 0     | 0        | 0      | 0           | 0            | 1      |\n","| rainiest  | 0         | 0      | 0            | 1      | 0             | 0     | 0        | 0      | 0           | 0            | 0      |\n","\n","Each column vector represents the word's context -in this case defined by the words to the left and right of the center word. How far we look to the left and right of a given word is referred to as our \"window of context.\" Each row vector represents the the different usages of a given word. Word2Vec can consider a larger context than only words that are immediately to the left and right of a given word, but we're going to keep our window of context small for this example. What's most important is that this vectorization has translated our documents from a text representation to a numeric one in a way that preserves information about the underlying context. \n","\n","We can see that words that have a similar context will have similar row-vector representations, but before looking that more in-depth, lets simplify our vectorization slightly. You'll notice that we're repeating the column-vector \"it_the\" twice. Lets combine those into a single vector by adding them element-wise. \n","\n","|       *   | START_was | it_the | was_sunniest | the_of | sunniest_days | of_it | days_was | was_rainiest | rainiest_days | of_END |\n","|----------|-----------|--------|--------------|--------|---------------|-------|----------|-------------|--------------|--------|\n","| it       | 1         | 0      | 0            | 0      | 0             | 0     | 1        | 0           | 0            | 0      |\n","| was      | 0         | 2      | 0            | 0      | 0             | 0     | 0        | 0           | 0            | 0      |\n","| the      | 0         | 0      | 1            | 0      | 0             | 0     | 0        | 1           | 0            | 0      |\n","| sunniest | 0         | 0      | 0            | 1      | 0             | 0     | 0        | 0           | 0            | 0      |\n","| of       | 0         | 0      | 0            | 0      | 1             | 0     | 0        | 0           | 1            | 0      |\n","| days     | 0         | 0      | 0            | 0      | 0             | 0     | 0        | 0           | 0            | 1      |\n","| rainiest  | 0         | 0      | 0            | 1      | 0             | 0     | 0        | 0           | 0            | 0      |\n","\n","Now, can you spot which words have a similar row-vector representation? Hint: Look for values that are repeated in a given column. Each column represents the context that word was found in. If there are multiple words that share a context then those words are understood to have a closer meaning with each other than with other words in the text.\n","\n","Lets look specifically at the words sunniest and rainiest. You'll notice that these two words have exactly the same 10-dimensional vector representation. Based on this very small corpora of text we would conclude that these two words have relatd meanings because they share the same usage. Is this a good assumption? Well, they are both referring to the weather outside so that's better than nothing. You could imagine that as our corpora grows larger we will be exposed a greater number of contexts and the Distribution Hypothesis assumption will improve. \n","\n","##3.2 Word2Vec Variants\n","\n","###3.2.1 Skip-Gram\n","\n","The Skip-Gram method predicts the neighbors’ of a word given a center word. In the skip-gram model, we take a center word and a window of context (neighbors) words to train the model and then predict context words out to some window size for each center word.\n","\n","This notion of “context” or “neighboring” words is best described by considering a center word and a window of words around it. \n","\n","For example, if we consider the sentence **“The speedy Porsche drove past the elegant Rolls-Royce”** and a window size of 2, we’d have the following pairs for the skip-gram model:\n","\n","**Text:**\n","**The**\tspeedy\tPorsche\tdrove\tpast\tthe\telegant\tRolls-Royce\n","\n","*Training Sample with window of 2*: (the, speedy), (the, Porsche)\n","\n","**Text:**\n","The\t**speedy**\tPorsche\tdrove\tpast\tthe\telegant\tRolls-Royce\n","\n","*Training Sample with window of 2*: (speedy, the), (speedy, Porsche), (speedy, drove)\n","\n","**Text:**\n","The\tspeedy\t**Porsche**\tdrove\tpast\tthe\telegant\tRolls-Royce\n","\n","*Training Sample with window of 2*: (Porsche, the), (Porsche, speedy), (Porsche, drove), (Porsche, past)\n","\n","**Text:**\n","The\tspeedy\tPorsche\t**drove**\tpast\tthe\telegant\tRolls-Royce\n","\n","*Training Sample with window of 2*: (drove, speedy), (drove, Porsche), (drove, past), (drove, the)\n","\n","The **Skip-gram model** is going to output a probability distribution i.e. the probability of a word appearing in context given a center word and we are going to select the vector representation that maximizes the probability.\n","\n","With CountVectorizer and TF-IDF the best we could do for context was to look at common bi-grams and tri-grams (n-grams). Well, skip-grams go far beyond that and give our model much stronger contextual information.\n","\n","![alt text](https://www.dropbox.com/s/c7mwy6dk9k99bgh/Image%202%20-%20SkipGrams.jpg?raw=1)\n","\n","###3.2.2 Continuous Bag of Words\n","\n","This model takes thes opposite approach from the skip-gram model in that it tries to predict a center word based on the neighboring words. In the case of the CBOW model, we input the context words within the window (such as “the”, “Porsche”, “drove”) and aim to predict the target or center word “speedy” (the input to the prediction pipeline is reversed as compared to the SkipGram model).\n","\n","A graphical depiction of the input to output prediction pipeline for both variants of the Word2vec model is attached. The graphical depiction will help crystallize the difference between SkipGrams and Continuous Bag of Words.\n","\n","![alt text](https://www.dropbox.com/s/k3ddmbtd52wq2li/Image%203%20-%20CBOW%20Model.jpg?raw=1)\n","\n","###3.2.3 Notes on Word Embeddings:\n","\n","1) Word2Vec is useful for topic-modeling, because each word vector contains information about related context words.\n","\n","2) Word2Vec can result in really large and complex vectorizations. In fact, you need Deep Neural Networks to train your Word2Vec models from scratch, but we can use helpful pretrained embeddings to do really cool things! \n","Let's take a look at how to work with these word vectors."]},{"cell_type":"markdown","metadata":{"id":"YbCusle-77J4"},"source":["## 3.3 Spacy word embeddings\n","#### `spacy` provides pretrained Word2Vec models. \n","\n","We will use their `en_core_web_md` model, which has 300-dimensional word embeddings for 20,000 words. "]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-08acf3f0c46d7591","locked":false,"schema_version":3,"solution":true,"task":false},"scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"zfaoM_g7dRAU","executionInfo":{"status":"ok","timestamp":1638298182299,"user_tz":480,"elapsed":345,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"d19b45a4-36b6-4a95-9ce2-640194722f92"},"source":["# Process a text\n","#nlp = spacy.load('en_core_web_md')\n","\n","### BEGIN SOLUTION\n","doc = nlp(\"bananas\")\n","\n","# Get the vector for the token \"bananas\"\n","bananas_vector = doc.vector\n","\n","# 300-dim vector\n","print(len(bananas_vector))\n","print(bananas_vector)\n","\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["300\n","[-2.2009e-01 -3.0322e-02 -7.9859e-02 -4.6279e-01 -3.8600e-01  3.6962e-01\n"," -7.7178e-01 -1.1529e-01  3.3601e-02  5.6573e-01 -2.4001e-01  4.1833e-01\n","  1.5049e-01  3.5621e-01 -2.1508e-01 -4.2743e-01  8.1400e-02  3.3916e-01\n","  2.1637e-01  1.4792e-01  4.5811e-01  2.0966e-01 -3.5706e-01  2.3800e-01\n","  2.7971e-02 -8.4538e-01  4.1917e-01 -3.9181e-01  4.0434e-04 -1.0662e+00\n","  1.4591e-01  1.4643e-03  5.1277e-01  2.6072e-01  8.3785e-02  3.0340e-01\n","  1.8579e-01  5.9999e-02 -4.0270e-01  5.0888e-01 -1.1358e-01 -2.8854e-01\n"," -2.7068e-01  1.1017e-02 -2.2217e-01  6.9076e-01  3.6459e-02  3.0394e-01\n","  5.6989e-02  2.2733e-01 -9.9473e-02  1.5165e-01  1.3540e-01 -2.4965e-01\n","  9.8078e-01 -8.0492e-01  1.9326e-01  3.1128e-01  5.5390e-02 -4.2423e-01\n"," -1.4082e-02  1.2708e-01  1.8868e-01  5.9777e-02 -2.2215e-01 -8.3950e-01\n","  9.1987e-02  1.0180e-01 -3.1299e-01  5.5083e-01 -3.0717e-01  4.4201e-01\n","  1.2666e-01  3.7643e-01  3.2333e-01  9.5673e-02  2.5083e-01 -6.4049e-02\n","  4.2143e-01 -1.9375e-01  3.8026e-01  7.0883e-03 -2.0371e-01  1.5402e-01\n"," -3.7877e-03 -2.9396e-01  9.6518e-01  2.0068e-01 -5.6572e-01 -2.2581e-01\n","  3.2251e-01 -3.4634e-01  2.7064e-01 -2.0687e-01 -4.7229e-01  3.1704e-01\n"," -3.4665e-01 -2.5188e-01 -1.1201e-01 -3.3937e-01  3.1518e-01 -3.2221e-01\n"," -2.4530e-01 -7.1571e-02 -4.3971e-01 -1.2070e+00  3.3365e-01 -5.8208e-02\n","  8.0899e-01  4.2335e-01  3.8678e-01 -6.0797e-01 -7.3760e-01 -2.0547e-01\n"," -1.7499e-01 -3.7842e-03  2.1930e-01 -5.2486e-02  3.4869e-01  4.3852e-01\n"," -3.4471e-01  2.8910e-01  7.2554e-02 -4.8625e-01 -3.8390e-01 -4.4760e-01\n","  4.3278e-01 -2.7128e-03 -9.0067e-01 -3.0819e-02 -3.8630e-01 -8.0798e-02\n"," -1.6243e-01  2.8830e-01 -2.6349e-01  1.7628e-01  3.5958e-01  5.7672e-01\n"," -5.4624e-01  3.8555e-02 -2.0182e+00  3.2916e-01  3.4672e-01  1.5398e-01\n"," -4.3446e-01 -4.1428e-02 -6.9588e-02  5.1513e-01 -1.3489e-01 -5.7239e-02\n","  4.9241e-01  1.8643e-01  3.8596e-01 -3.7329e-02 -5.4216e-01 -1.8152e-01\n","  4.3110e-01 -4.6967e-01  6.6801e-02  5.0323e-01 -2.4059e-01  3.6742e-01\n","  2.9300e-01 -8.7883e-02 -4.7940e-01 -4.3431e-02 -2.6137e-01 -6.2658e-01\n","  1.1446e-01  2.7682e-01  3.4800e-01  5.0018e-01  1.4269e-01 -3.3545e-01\n"," -3.9712e-01 -3.3121e-01 -3.4434e-01 -4.1627e-01 -3.5707e-03 -6.2350e-01\n","  3.7794e-01 -1.6765e-01 -4.1954e-01 -3.3134e-01  3.1232e-01 -3.9494e-01\n"," -4.6921e-03 -4.8884e-01 -2.2059e-02 -2.6174e-01  1.7937e-01  3.6628e-01\n","  5.8971e-02 -3.5991e-01 -4.4393e-01 -1.1890e-01  3.3487e-01  3.6505e-02\n"," -3.2788e-01  3.3425e-01 -5.6361e-01 -1.1190e-01  5.3770e-01  2.0311e-01\n","  1.5110e-01  1.0623e-02  3.3401e-01  4.6084e-01  5.6293e-01 -7.5432e-02\n","  5.4813e-01  1.9395e-01 -2.6265e-01 -3.1699e-01 -8.1778e-01  5.8169e-02\n"," -5.7866e-02 -1.1781e-01 -5.8742e-02 -1.4092e-01 -9.9394e-01 -9.4532e-02\n","  2.3503e-01 -4.9027e-01  8.5832e-01  1.1540e-01 -1.5049e-01  1.9065e-01\n"," -2.6705e-01  2.5326e-01 -6.7579e-01 -1.0633e-02 -5.5158e-02 -3.1004e-01\n"," -5.8036e-02 -1.7200e-01  1.3298e-01 -3.2899e-01 -7.5481e-02  2.9425e-02\n"," -3.2949e-01 -1.8691e-01 -9.5323e-01 -3.5468e-01 -3.3162e-01  5.6441e-02\n","  2.1790e-02  1.7182e-01 -4.4267e-01  6.9765e-01 -2.6876e-01  1.1659e-01\n"," -1.6584e-01  3.8296e-01  2.9109e-01  3.6318e-01  3.6961e-01  1.6305e-01\n","  1.8152e-01  2.2453e-01  3.9866e-02 -3.7607e-02 -3.6089e-01  7.0818e-02\n"," -2.1509e-01  3.6551e-01 -5.1603e-01 -5.8102e-03 -4.8320e-01 -2.5068e-01\n"," -5.2062e-02 -2.0828e-01  2.9060e-01  2.2084e-02 -6.8123e-01  4.2063e-01\n","  9.5973e-02  8.1720e-01 -1.5241e-01  6.2994e-01  2.6449e-01 -1.3516e-01\n","  3.2450e-01  3.0503e-01  1.2357e-01  1.5107e-01  2.8327e-01 -3.3838e-01\n","  4.6106e-02 -1.2361e-01  1.4516e-01 -2.7947e-02  2.6231e-02 -5.9591e-01\n"," -4.4183e-01  7.8440e-01 -3.4375e-02 -1.3928e+00  3.5248e-01  6.5220e-01]\n"]}]},{"cell_type":"markdown","metadata":{"id":"FD1qE_vCHWuG"},"source":["### Spacy Document vectors\n","\n","From spacy we can get word2vec embeddings for each word in a document<br>\n","We can create a document vector by averaging all the word vectors in that doc<br>\n","We can calculate the similarity between documents now! "]},{"cell_type":"code","metadata":{"id":"6Vkq3tlyL2Xp"},"source":["doc1 = nlp(\"On a hot summer day, it's good to drink water.\")\n","doc2 = nlp(\"There are lots of cold drinks in the refrigerator.\")\n","doc3 = nlp(\"cosine distance measures similarity\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zM5RbtPfL38t","executionInfo":{"status":"ok","timestamp":1638298290810,"user_tz":480,"elapsed":327,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"70234641-eec4-42f6-def7-d315b1ac8752"},"source":["len(doc1.vector)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["300"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lz5eGGl5MKxx","executionInfo":{"status":"ok","timestamp":1638298339507,"user_tz":480,"elapsed":356,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"da507966-9270-4931-c387-0e210aa122f0"},"source":["type(doc)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["spacy.tokens.doc.Doc"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-4a00f1280d6a3a32","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"CXNDY_VadRAV","executionInfo":{"status":"ok","timestamp":1638302484178,"user_tz":480,"elapsed":171,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"5c7787d6-23e6-4ee1-b4dc-86f0f70b71b6"},"source":["\n","### BEGIN SOLUTION\n","# Get the similarity of doc1 and doc2\n","similarity = doc1.similarity(doc2)\n","print(similarity)\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8838439897643992\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"plyigAgONqJ5","executionInfo":{"status":"ok","timestamp":1638302711524,"user_tz":480,"elapsed":156,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"6521e739-0f85-4011-912c-df9fc91d29f0"},"source":["doc3.similarity(doc2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3532817580631088"]},"metadata":{},"execution_count":132}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QbXwpFEvcdQG","executionInfo":{"status":"ok","timestamp":1638302713137,"user_tz":480,"elapsed":183,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"abf82740-d4a9-42bc-93f8-44e504c4486b"},"source":["doc3.similarity(doc1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3225841257225828"]},"metadata":{},"execution_count":133}]},{"cell_type":"markdown","metadata":{"id":"fBwRFUIhzH79"},"source":["## Challenge: can we make a \"thesaurus\"?<br>\n","Given a query word, do you think we could find good synonyms  <br>\n","by doing a nearest neighbor search on the `spacy` word embeddings?<br>\n","Let's give it a try!"]},{"cell_type":"markdown","metadata":{"id":"93PNwg0ODA5k"},"source":["First, get the embeddings for the vocabulary words and make a document-term matrix"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sKtrMIBTe4Ja","executionInfo":{"status":"ok","timestamp":1638302210568,"user_tz":480,"elapsed":228,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"e196c08e-8243-4556-9560-5fde45e3c308"},"source":["%%time\n","vocab = list(nlp.vocab.strings)\n","print(len(vocab))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1493734\n","CPU times: user 1.69 s, sys: 64.1 ms, total: 1.76 s\n","Wall time: 1.76 s\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HhvStTRcYt70","executionInfo":{"status":"ok","timestamp":1638302216633,"user_tz":480,"elapsed":569,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"4012fef6-e03c-4d79-9830-9823f3f723ab"},"source":["# eliminate duplicates due to mixing upper and lower case\n","vocab =[word.lower() for word in vocab]\n","vocab = list(set(lower_vocab))\n","print(len(vocab))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["770783\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NYsIXtUlZobh","executionInfo":{"status":"ok","timestamp":1638302240018,"user_tz":480,"elapsed":15059,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"15a9c76d-6ea0-4392-ccdb-53d40dfc60e0"},"source":["%%time\n","word_vectors = [nlp.vocab.get_vector(word) for word in vocab]\n","word_vectors = np.asarray(word_vectors)\n","print(word_vectors.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(770783, 300)\n","CPU times: user 14.9 s, sys: 54.4 ms, total: 15 s\n","Wall time: 14.9 s\n"]}]},{"cell_type":"markdown","metadata":{"id":"PJuBDt0PEh3G"},"source":["Fit a nearest-neighbors model to the document-term matrix"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IB3pAOhmto8W","executionInfo":{"status":"ok","timestamp":1638302248567,"user_tz":480,"elapsed":416,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"81e59b91-5c1f-4741-8e07-c038a22e7250"},"source":["%%time\n","nn = NearestNeighbors(n_neighbors=10, algorithm='auto')\n","\n","# fit to the document-term matrix of all the vocabulary words\n","nn.fit(word_vectors)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 264 ms, sys: 1.8 ms, total: 265 ms\n","Wall time: 219 ms\n"]}]},{"cell_type":"markdown","metadata":{"id":"qdrcAOcfChy0"},"source":["Choose a query word, for which you want to find synonyms"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8pBxmi4O5rhp","executionInfo":{"status":"ok","timestamp":1638302257714,"user_tz":480,"elapsed":148,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"a7f40bd3-0a0e-4c9d-c887-a0371e2d4135"},"source":["query_word = 'marvelous'\n","query_vector = nlp.vocab.get_vector(query_word)[None,:]\n","query_vector.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 300)"]},"metadata":{},"execution_count":107}]},{"cell_type":"markdown","metadata":{"id":"qRbtlDz0EI6Q"},"source":["Find the nearest neighbors to the query, from spacy's vocabulary"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"plA09PgS68Sc","executionInfo":{"status":"ok","timestamp":1638302374625,"user_tz":480,"elapsed":1012,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"3c4022f3-7011-40fc-a23b-c1fbb39723eb"},"source":["neigh_dist, neigh_index = nn.kneighbors(query_vector, n_neighbors=20)\n","[vocab[int(index)] for index in neigh_index[0]]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['wondeful',\n"," 'wonderul',\n"," 'wonderful',\n"," 'marvelous',\n"," 'wonderfull',\n"," 'fantastic',\n"," 'fantasic',\n"," 'fab',\n"," 'fabulous',\n"," 'fantabulous',\n"," 'loverly',\n"," 'lovely',\n"," 'great',\n"," 'amazing',\n"," 'amzing',\n"," 'all-around',\n"," 'terrific',\n"," 'delightful',\n"," 'bewitching',\n"," 'beatiful']"]},"metadata":{},"execution_count":111}]},{"cell_type":"markdown","metadata":{"id":"_JftffA2DK2Y"},"source":["## Can we visualize word vectors?\n","\n","300 dimensional word vectors are difficult (impossible) to visualize! <br>\n","However, we can use Principal Components Analysis (PCA) to reduce their dimensionality. <br>\n","\n","PCA is one of the most important techniques in machine learning, and indeed in all of mathematics! PCA transforms the feature vectors of a data set to their \"Principal Components\", which are ranked in order of their importance in describing the data set. By eliminating the less important Principal Components, we can reduce the dimensionality of the data set, at the cost of losing some information.\n","\n","If you're interested to explore this topic in greater depth, here are a couple of references:\n","- One of the best brief introductions to the mathematics of PCA is [Daniela Witten's tweetstorm](https://twitter.com/womeninstat/status/1285610321747611653?lang=en)\n","- For a more in-depth, but still understandable exposition of PCA, watch the Statquest video [Principal Component Analysis (PCA), Step-by-Step](https://youtu.be/FgakZw6K1QQ) from Josh Starmer.\n","\n","Now let's use PCA to reduce our 300-dimensional word vectors down to two dimensions, so that we can visualize them in a plane. Of course, in the process we lose a lot of information, but these 2D word vectors still pack a surprising amount of information!"]},{"cell_type":"code","metadata":{"nbgrader":{"grade":false,"grade_id":"cell-c54d3921b438215d","locked":false,"schema_version":3,"solution":true,"task":false},"colab":{"base_uri":"https://localhost:8080/"},"id":"WNGfmJ13dRAV","executionInfo":{"status":"ok","timestamp":1635270306413,"user_tz":420,"elapsed":398,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"266d981a-98d5-48e1-ed0f-aab438467fde"},"source":["# import the PCA module from sklearn\n","from sklearn.decomposition import PCA\n","\n","def get_word_vectors(words):\n","    # converts a list of words into their word vectors\n","    return [nlp(word).vector for word in words]\n","\n","words = ['machine learning', 'man', 'woman',  'king', 'queen',\n","         'artificial intelligence', 'nurse', 'doctor', \n","         'data', 'science', \n","         'concrete', 'wood', \n","         'marble', 'design',\n","         'color', 'font']\n","\n","\n","word_vectors = get_word_vectors(words)\n","\n","\n","# intialise pca model and tell it to project data down onto 2 dimensions\n","\n","# fit the pca model to our 300D data, this will work out which is the best \n","# way to project the data down that will best maintain the relative distances \n","# between data points. It will store these intructioons on how to transform the data.\n","\n","# Tell our (fitted) pca model to transform our 300D data down onto 2D using the \n","# instructions it learnt during the fit phase.\n","\n","# let's look at our new 2D word vectors\n","\n","### BEGIN SOLUTION\n","\n","# intialise pca model and tell it to project data down onto 2 dimensions\n","pca = PCA(n_components=2)\n","\n","# fit the pca model to our 300D data, this will work out which is the best \n","# way to project the data down that will best maintain the relative distances \n","# between data points. It will store these intructioons on how to transform the data.\n","pca.fit(word_vectors)\n","\n","# Tell our (fitted) pca model to transform our 300D data down onto 2D using the \n","# instructions it learnt during the fit phase.\n","word_vecs_2d = pca.transform(word_vectors)\n","\n","# the fit and transform operations could also be done in one step\n","#word_vecs_2d = pca.fit.transform(word_vectors)\n","\n","# let's look at our new 2D word vectors\n","word_vecs_2d\n","### END SOLUTION"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.41618712,  1.26197946],\n","       [ 2.18589198, -0.71261883],\n","       [ 3.31224199, -0.63002031],\n","       [ 1.59658923, -3.92203056],\n","       [ 1.85318628, -3.63087635],\n","       [-0.44013359,  1.74871011],\n","       [ 4.43418803,  1.1308269 ],\n","       [ 3.83412466,  1.27867761],\n","       [-1.18444862,  4.02456793],\n","       [ 0.29446239,  2.77555674],\n","       [-2.87613195, -0.30775046],\n","       [-2.84180888, -2.66241824],\n","       [-3.03420388, -3.43600248],\n","       [-2.43581889,  1.23093633],\n","       [-2.24288034,  0.69948326],\n","       [-2.03907129,  1.15097888]])"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":483},"id":"mjxAfKfodRAV","executionInfo":{"status":"ok","timestamp":1635270310957,"user_tz":420,"elapsed":475,"user":{"displayName":"Joseph catanzarite","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgmMRaw8NgoEDqzevEZ6b18iOYdEH9nWTZeaFBW=s64","userId":"16649206137414945374"}},"outputId":"529be6ba-2178-4264-c377-10aeed4fc674"},"source":["# create a nice big plot \n","plt.figure(figsize=(12,8))\n","\n","# plot the scatter plot of where the words will be\n","plt.scatter(word_vecs_2d[:,0], word_vecs_2d[:,1])\n","\n","# for each word and coordinate pair: draw the text on the plot\n","for word, coord in zip(words, word_vecs_2d):\n","    x, y = coord\n","    plt.text(x, y, word, size= 15)\n","\n","# show the plot\n","plt.grid();\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ruZeW9_ZDACQ"},"source":["### Spend a few minutes exploring the magic of word vectors!\n","Create your own `words` list and run it through the code in the above two cells. <br>\n","Perhaps include clusters of words that have similar meanings or that might <br>reveal implicit gender bias or some other kind of bias. What did you find out?"]},{"cell_type":"markdown","metadata":{"id":"6uAb_h7ldRAW"},"source":["## Challenge\n","\n","You will extract word embeddings from documents using Spacy's pre-trained model in the upcoming module project. "]},{"cell_type":"markdown","metadata":{"id":"KUWsVDc4dRAW"},"source":["## King - Man + Woman = Queen \n","\n","Check out [**The amazing power of word vectors**](https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/), which explores the above equation"]},{"cell_type":"markdown","metadata":{"id":"yEkjvdD5dRAW"},"source":["# Sources\n","\n","* Spacy 101 - https://course.spacy.io\n","* NLTK Book - https://www.nltk.org/book/\n","* An Introduction to Information Retrieval - https://nlp.stanford.edu/IR-book/pdf/irbookonlinereading.pdf"]}]}